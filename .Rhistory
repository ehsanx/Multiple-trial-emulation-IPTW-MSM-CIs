geom_line(aes(x = 0:4, y = bias_point[,i,2], colour = 'Medium')) +
geom_point(aes(x = 0:4, y = bias_point[,i,2], colour = 'Medium')) +
geom_line(aes(x = 0:4, y = bias_point[,i,3], colour = 'High')) +
geom_point(aes(x = 0:4, y = bias_point[,i,3], colour = 'High')) +
xlab(bquote(paste('N = ',.(scenarios[i,1]),", ", alpha[c] == .(scenarios[i,2]),', ',alpha[a] == .(scenarios[i,3])))) +
ylab("Empirical bias") +
theme(aspect.ratio = 1, axis.title = element_text(size = 10),axis.text=element_text(size=7)) +
scale_color_manual(name = "Event rate", values = c("Low"= "red", "Medium" = "blue",
"High" = "green")) +
ylim(-0.1,0.1)
})
annotate_figure(ggarrange(plotlist = bias_plots_low[1:27], nrow = 3, ncol = 9, common.legend = T, legend = 'bottom'), top = 'MRD estimation bias')
################BIAS, SD, MSE PLOTS ###################
bias_plots_low <- lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 0:4, y = bias_point[,i,1], colour = 'Low')) +
geom_point(aes(x = 0:4, y = bias_point[,i,1], colour = 'Low')) +
geom_line(aes(x = 0:4, y = bias_point[,i,2], colour = 'Medium')) +
geom_point(aes(x = 0:4, y = bias_point[,i,2], colour = 'Medium')) +
geom_line(aes(x = 0:4, y = bias_point[,i,3], colour = 'High')) +
geom_point(aes(x = 0:4, y = bias_point[,i,3], colour = 'High')) +
xlab(bquote(paste('N = ',.(scenarios[i,1]),", ", alpha[c] == .(scenarios[i,2]),', ',alpha[a] == .(scenarios[i,3])))) +
ylab("Empirical bias") +
theme(aspect.ratio = 1,axis.text=element_text(size=7)) +
scale_color_manual(name = "Event rate", values = c("Low"= "red", "Medium" = "blue",
"High" = "green")) +
ylim(-0.1,0.1)
})
annotate_figure(ggarrange(plotlist = bias_plots_low[1:27], nrow = 3, ncol = 9, common.legend = T, legend = 'bottom'), top = 'MRD estimation bias')
################BIAS, SD, MSE PLOTS ###################
bias_plots_low <- lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 0:4, y = bias_point[,i,1], colour = 'Low')) +
geom_point(aes(x = 0:4, y = bias_point[,i,1], colour = 'Low')) +
geom_line(aes(x = 0:4, y = bias_point[,i,2], colour = 'Medium')) +
geom_point(aes(x = 0:4, y = bias_point[,i,2], colour = 'Medium')) +
geom_line(aes(x = 0:4, y = bias_point[,i,3], colour = 'High')) +
geom_point(aes(x = 0:4, y = bias_point[,i,3], colour = 'High')) +
xlab(bquote(paste('N = ',.(scenarios[i,1]),", ", alpha[c] == .(scenarios[i,2]),', ',alpha[a] == .(scenarios[i,3])))) +
ylab("Empirical bias") +
theme(aspect.ratio = 1,axis.text=element_text(size=3)) +
scale_color_manual(name = "Event rate", values = c("Low"= "red", "Medium" = "blue",
"High" = "green")) +
ylim(-0.1,0.1)
})
annotate_figure(ggarrange(plotlist = bias_plots_low[1:27], nrow = 3, ncol = 9, common.legend = T, legend = 'bottom'), top = 'MRD estimation bias')
################BIAS, SD, MSE PLOTS ###################
bias_plots_low <- lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 0:4, y = bias_point[,i,1], colour = 'Low')) +
geom_point(aes(x = 0:4, y = bias_point[,i,1], colour = 'Low')) +
geom_line(aes(x = 0:4, y = bias_point[,i,2], colour = 'Medium')) +
geom_point(aes(x = 0:4, y = bias_point[,i,2], colour = 'Medium')) +
geom_line(aes(x = 0:4, y = bias_point[,i,3], colour = 'High')) +
geom_point(aes(x = 0:4, y = bias_point[,i,3], colour = 'High')) +
xlab(bquote(paste('N = ',.(scenarios[i,1]),", ", alpha[c] == .(scenarios[i,2]),', ',alpha[a] == .(scenarios[i,3])))) +
ylab("Empirical bias") +
theme(aspect.ratio = 1,axis.title=element_text(size=5)) +
scale_color_manual(name = "Event rate", values = c("Low"= "red", "Medium" = "blue",
"High" = "green")) +
ylim(-0.1,0.1)
})
annotate_figure(ggarrange(plotlist = bias_plots_low[1:27], nrow = 3, ncol = 9, common.legend = T, legend = 'bottom'), top = 'MRD estimation bias')
################BIAS, SD, MSE PLOTS ###################
bias_plots_low <- lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 0:4, y = bias_point[,i,1], colour = 'Low')) +
geom_point(aes(x = 0:4, y = bias_point[,i,1], colour = 'Low')) +
geom_line(aes(x = 0:4, y = bias_point[,i,2], colour = 'Medium')) +
geom_point(aes(x = 0:4, y = bias_point[,i,2], colour = 'Medium')) +
geom_line(aes(x = 0:4, y = bias_point[,i,3], colour = 'High')) +
geom_point(aes(x = 0:4, y = bias_point[,i,3], colour = 'High')) +
xlab(bquote(paste('N = ',.(scenarios[i,1]),", ", alpha[c] == .(scenarios[i,2]),', ',alpha[a] == .(scenarios[i,3])))) +
ylab("Empirical bias") +
theme(aspect.ratio = 1,axis.title=element_text(size=6), axis.text = element_text(size=6)) +
scale_color_manual(name = "Event rate", values = c("Low"= "red", "Medium" = "blue",
"High" = "green")) +
ylim(-0.1,0.1)
})
annotate_figure(ggarrange(plotlist = bias_plots_low[1:27], nrow = 3, ncol = 9, common.legend = T, legend = 'bottom'), top = 'MRD estimation bias')
################BIAS, SD, MSE PLOTS ###################
bias_plots_low <- lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 0:4, y = bias_point[,i,1], colour = 'Low')) +
geom_point(aes(x = 0:4, y = bias_point[,i,1], colour = 'Low')) +
geom_line(aes(x = 0:4, y = bias_point[,i,2], colour = 'Medium')) +
geom_point(aes(x = 0:4, y = bias_point[,i,2], colour = 'Medium')) +
geom_line(aes(x = 0:4, y = bias_point[,i,3], colour = 'High')) +
geom_point(aes(x = 0:4, y = bias_point[,i,3], colour = 'High')) +
xlab(bquote(paste('N = ',.(scenarios[i,1]),", ", alpha[c] == .(scenarios[i,2]),', ',alpha[a] == .(scenarios[i,3])))) +
ylab("Empirical bias") +
theme(aspect.ratio = 1,axis.title=element_text(size=8), axis.text = element_text(size=6)) +
scale_color_manual(name = "Event rate", values = c("Low"= "red", "Medium" = "blue",
"High" = "green")) +
ylim(-0.1,0.1)
})
annotate_figure(ggarrange(plotlist = bias_plots_low[1:27], nrow = 3, ncol = 9, common.legend = T, legend = 'bottom'), top = 'MRD estimation bias')
################BIAS, SD, MSE PLOTS ###################
bias_plots_low <- lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 0:4, y = bias_point[,i,1], colour = 'Low')) +
geom_point(aes(x = 0:4, y = bias_point[,i,1], colour = 'Low')) +
geom_line(aes(x = 0:4, y = bias_point[,i,2], colour = 'Medium')) +
geom_point(aes(x = 0:4, y = bias_point[,i,2], colour = 'Medium')) +
geom_line(aes(x = 0:4, y = bias_point[,i,3], colour = 'High')) +
geom_point(aes(x = 0:4, y = bias_point[,i,3], colour = 'High')) +
xlab(bquote(paste('N = ',.(scenarios[i,1]),", ", alpha[c] == .(scenarios[i,2]),', ',alpha[a] == .(scenarios[i,3])))) +
ylab("Empirical bias") +
theme(aspect.ratio = 1,axis.title=element_text(size=12), axis.text = element_text(size=8)) +
scale_color_manual(name = "Event rate", values = c("Low"= "red", "Medium" = "blue",
"High" = "green")) +
ylim(-0.1,0.1)
})
annotate_figure(ggarrange(plotlist = bias_plots_low[1:27], nrow = 3, ncol = 9, common.legend = T, legend = 'bottom'), top = 'MRD estimation bias')
################BIAS, SD, MSE PLOTS ###################
bias_plots_low <- lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 0:4, y = bias_point[,i,1], colour = 'Low')) +
geom_point(aes(x = 0:4, y = bias_point[,i,1], colour = 'Low')) +
geom_line(aes(x = 0:4, y = bias_point[,i,2], colour = 'Medium')) +
geom_point(aes(x = 0:4, y = bias_point[,i,2], colour = 'Medium')) +
geom_line(aes(x = 0:4, y = bias_point[,i,3], colour = 'High')) +
geom_point(aes(x = 0:4, y = bias_point[,i,3], colour = 'High')) +
xlab(bquote(paste('N = ',.(scenarios[i,1]),", ", alpha[c] == .(scenarios[i,2]),', ',alpha[a] == .(scenarios[i,3])))) +
ylab("Empirical bias") +
theme(aspect.ratio = 1,axis.title=element_text(size=10), axis.text = element_text(size=8)) +
scale_color_manual(name = "Event rate", values = c("Low"= "red", "Medium" = "blue",
"High" = "green")) +
ylim(-0.1,0.1)
})
annotate_figure(ggarrange(plotlist = bias_plots_low[1:27], nrow = 3, ncol = 9, common.legend = T, legend = 'bottom'), top = 'MRD estimation bias')
sd_plots <- lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 0:4, y = sd_point[,i,1], colour = 'Low')) +
geom_point(aes(x = 0:4, y = sd_point[,i,1], colour = 'Low')) +
geom_line(aes(x = 0:4, y = sd_point[,i,2], colour = 'Medium')) +
geom_point(aes(x = 0:4, y = sd_point[,i,2], colour = 'Medium')) +
geom_line(aes(x = 0:4, y = sd_point[,i,3], colour = 'High')) +
geom_point(aes(x = 0:4, y = sd_point[,i,3], colour = 'High')) +
xlab(bquote(paste('N = ',.(scenarios[i,1]),", ", alpha[c] == .(scenarios[i,2]),', ',alpha[a] == .(scenarios[i,3])))) +
ylab("Empirical SD") +
theme(aspect.ratio = 1,axis.title=element_text(size=10), axis.text = element_text(size=8)) +
scale_color_manual(name = "Event rate", values = c("Low"= "red", "Medium" = "blue",
"High" = "green")) +
ylim(0,0.3)
})
annotate_figure(ggarrange(plotlist = sd_plots[1:27], nrow = 3, ncol = 9, common.legend = T, legend = 'bottom'), top = 'MRD estimation SD')
sd_plots <- lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 0:4, y = sd_point[,i,1], colour = 'Low')) +
geom_point(aes(x = 0:4, y = sd_point[,i,1], colour = 'Low')) +
geom_line(aes(x = 0:4, y = sd_point[,i,2], colour = 'Medium')) +
geom_point(aes(x = 0:4, y = sd_point[,i,2], colour = 'Medium')) +
geom_line(aes(x = 0:4, y = sd_point[,i,3], colour = 'High')) +
geom_point(aes(x = 0:4, y = sd_point[,i,3], colour = 'High')) +
xlab(bquote(paste('N = ',.(scenarios[i,1]),", ", alpha[c] == .(scenarios[i,2]),', ',alpha[a] == .(scenarios[i,3])))) +
ylab("Empirical SD") +
theme(aspect.ratio = 1,axis.title=element_text(size=10), axis.text = element_text(size=8)) +
scale_color_manual(name = "Event rate", values = c("Low"= "red", "Medium" = "blue",
"High" = "green")) +
ylim(0,0.25)
})
annotate_figure(ggarrange(plotlist = sd_plots[1:27], nrow = 3, ncol = 9, common.legend = T, legend = 'bottom'), top = 'MRD estimation SD')
sd_plots <- lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 0:4, y = sd_point[,i,1], colour = 'Low')) +
geom_point(aes(x = 0:4, y = sd_point[,i,1], colour = 'Low')) +
geom_line(aes(x = 0:4, y = sd_point[,i,2], colour = 'Medium')) +
geom_point(aes(x = 0:4, y = sd_point[,i,2], colour = 'Medium')) +
geom_line(aes(x = 0:4, y = sd_point[,i,3], colour = 'High')) +
geom_point(aes(x = 0:4, y = sd_point[,i,3], colour = 'High')) +
xlab(bquote(paste('N = ',.(scenarios[i,1]),", ", alpha[c] == .(scenarios[i,2]),', ',alpha[a] == .(scenarios[i,3])))) +
ylab("Empirical SD") +
theme(aspect.ratio = 1,axis.title=element_text(size=10), axis.text = element_text(size=8)) +
scale_color_manual(name = "Event rate", values = c("Low"= "red", "Medium" = "blue",
"High" = "green")) +
ylim(0,0.28)
})
annotate_figure(ggarrange(plotlist = sd_plots[1:27], nrow = 3, ncol = 9, common.legend = T, legend = 'bottom'), top = 'MRD estimation SD')
mse_plots <- lapply(1:27, function(i){
geom_line(aes(x = 0:4, y = sqrt(bias_point[,i,1]^2 + sd_point[,i,1]^2), colour = 'Low')) +
geom_point(aes(x = 0:4, y = sqrt(bias_point[,i,1]^2 + sd_point[,i,1]^2), colour = 'Low')) +
geom_line(aes(x = 0:4, y = sqrt(bias_point[,i,2]^2 + sd_point[,i,2]^2), colour = 'Medium')) +
geom_point(aes(x = 0:4, y = sqrt(bias_point[,i,2]^2 + sd_point[,i,2]^2), colour = 'Medium')) +
geom_line(aes(x = 0:4, y = sqrt(bias_point[,i,3]^2 + sd_point[,i,3]^2), colour = 'High')) +
geom_point(aes(x = 0:4, y = sqrt(bias_point[,i,3]^2 + sd_point[,i,3]^2), colour = 'High')) +
xlab(bquote(paste('N = ',.(scenarios[i,1]),", ", alpha[c] == .(scenarios[i,2]),', ',alpha[a] == .(scenarios[i,3])))) +
ylab("Empirical root-MSE") +
theme(aspect.ratio = 1,axis.title=element_text(size=10), axis.text = element_text(size=8)) +
scale_color_manual(name = "Event rate", values = c("Low"= "red", "Medium" = "blue",
"High" = "green")) +
ylim(0,0.5)
})
annotate_figure(ggarrange(plotlist = mse_plots[1:27], nrow = 3, ncol = 9, common.legend = T, legend = 'bottom'), top = 'MRD estimation root-MSE')
mse_plots <- lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 0:4, y = sqrt(bias_point[,i,1]^2 + sd_point[,i,1]^2), colour = 'Low')) +
geom_point(aes(x = 0:4, y = sqrt(bias_point[,i,1]^2 + sd_point[,i,1]^2), colour = 'Low')) +
geom_line(aes(x = 0:4, y = sqrt(bias_point[,i,2]^2 + sd_point[,i,2]^2), colour = 'Medium')) +
geom_point(aes(x = 0:4, y = sqrt(bias_point[,i,2]^2 + sd_point[,i,2]^2), colour = 'Medium')) +
geom_line(aes(x = 0:4, y = sqrt(bias_point[,i,3]^2 + sd_point[,i,3]^2), colour = 'High')) +
geom_point(aes(x = 0:4, y = sqrt(bias_point[,i,3]^2 + sd_point[,i,3]^2), colour = 'High')) +
xlab(bquote(paste('N = ',.(scenarios[i,1]),", ", alpha[c] == .(scenarios[i,2]),', ',alpha[a] == .(scenarios[i,3])))) +
ylab("Empirical root-MSE") +
theme(aspect.ratio = 1,axis.title=element_text(size=10), axis.text = element_text(size=8)) +
scale_color_manual(name = "Event rate", values = c("Low"= "red", "Medium" = "blue",
"High" = "green")) +
ylim(0,0.5)
})
annotate_figure(ggarrange(plotlist = mse_plots[1:27], nrow = 3, ncol = 9, common.legend = T, legend = 'bottom'), top = 'MRD estimation root-MSE')
mse_plots <- lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 0:4, y = sqrt(bias_point[,i,1]^2 + sd_point[,i,1]^2), colour = 'Low')) +
geom_point(aes(x = 0:4, y = sqrt(bias_point[,i,1]^2 + sd_point[,i,1]^2), colour = 'Low')) +
geom_line(aes(x = 0:4, y = sqrt(bias_point[,i,2]^2 + sd_point[,i,2]^2), colour = 'Medium')) +
geom_point(aes(x = 0:4, y = sqrt(bias_point[,i,2]^2 + sd_point[,i,2]^2), colour = 'Medium')) +
geom_line(aes(x = 0:4, y = sqrt(bias_point[,i,3]^2 + sd_point[,i,3]^2), colour = 'High')) +
geom_point(aes(x = 0:4, y = sqrt(bias_point[,i,3]^2 + sd_point[,i,3]^2), colour = 'High')) +
xlab(bquote(paste('N = ',.(scenarios[i,1]),", ", alpha[c] == .(scenarios[i,2]),', ',alpha[a] == .(scenarios[i,3])))) +
ylab("Empirical root-MSE") +
theme(aspect.ratio = 1,axis.title=element_text(size=10), axis.text = element_text(size=8)) +
scale_color_manual(name = "Event rate", values = c("Low"= "red", "Medium" = "blue",
"High" = "green")) +
ylim(0,0.3)
})
annotate_figure(ggarrange(plotlist = mse_plots[1:27], nrow = 3, ncol = 9, common.legend = T, legend = 'bottom'), top = 'MRD estimation root-MSE')
ggplot() +
geom_bar(aes(x = PP_prep$data$weight)) +
labs(x =   paste0('Max weight = ',round(max(PP_prep$data$weight),2)),
y = "Density",
title = paste("N =", scenarios[i,1],
'\nConfounding =',scenarios[i,2],
'\nTreat. prev. =', scenarios[i,3])) +
xlim(-1,3) +
theme(plot.title = element_text(size=10))+ theme(aspect.ratio = 1, axis.title = element_text(size = 10))
ggplot() +
geom_bar(aes(x = PP_prep$data$weight, y = .density)) +
labs(x =   paste0('Max weight = ',round(max(PP_prep$data$weight),2)),
y = "Density",
title = paste("N =", scenarios[i,1],
'\nConfounding =',scenarios[i,2],
'\nTreat. prev. =', scenarios[i,3])) +
xlim(-1,3) +
theme(plot.title = element_text(size=10))+ theme(aspect.ratio = 1, axis.title = element_text(size = 10))
ggplot() +
geom_histogram(aes(x = PP_prep$data$weight)) +
labs(x =   paste0('Max weight = ',round(max(PP_prep$data$weight),2)),
y = "Density",
title = paste("N =", scenarios[i,1],
'\nConfounding =',scenarios[i,2],
'\nTreat. prev. =', scenarios[i,3])) +
xlim(-1,3) +
theme(plot.title = element_text(size=10))+ theme(aspect.ratio = 1, axis.title = element_text(size = 10))
simdata_censored<-DATA_GEN_censored_reduced(as.numeric(scenarios[i,1]), 5,
conf = as.numeric(scenarios[i,2]),
treat_prev = as.numeric(scenarios[i,3]),
outcome_prev = -4.7,
censor = F)
avg(simdata_censored)
PP_prep <- TrialEmulation::data_preparation(simdata_censored, id='ID', period='t', treatment='A', outcome='Y',
eligible ='eligible',
switch_d_cov = ~X2 + X4,
outcome_cov = ~X2 + X4, model_var = c('assigned_treatment'),
use_weight=T, use_censor=T, quiet = T,
save_weight_models = F,
data_dir = data_direction)
avg(PP_prep$data$weight)
mean(PP_prep$data$weight)
################WEIGHTS########################
weights <- data.frame(matrix(,nrow = 0, ncol = 7))
weights_low <- lapply(1:27, function(i){
simdata_censored<-DATA_GEN_censored_reduced(as.numeric(scenarios[i,1]), 5,
conf = as.numeric(scenarios[i,2]),
treat_prev = as.numeric(scenarios[i,3]),
outcome_prev = -4.7,
censor = F)
PP_prep <- TrialEmulation::data_preparation(simdata_censored, id='ID', period='t', treatment='A', outcome='Y',
eligible ='eligible',
switch_d_cov = ~X2 + X4,
outcome_cov = ~X2 + X4, model_var = c('assigned_treatment'),
use_weight=T, use_censor=T, quiet = T,
save_weight_models = F,
data_dir = data_direction)
weights <- rbind(weights, c('Low', as.numeric(scenarios[i,1]), as.numeric(scenarios[i,2]),as.numeric(scenarios[i,3]),
mean(PP_prep$data$weight), sd(PP_prep$data$weight), max(PP_prep$data$weight)))
})
View(weights)
for(i in 1:27){
simdata_censored<-DATA_GEN_censored_reduced(as.numeric(scenarios[i,1]), 5,
conf = as.numeric(scenarios[i,2]),
treat_prev = as.numeric(scenarios[i,3]),
outcome_prev = -4.7,
censor = F)
PP_prep <- TrialEmulation::data_preparation(simdata_censored, id='ID', period='t', treatment='A', outcome='Y',
eligible ='eligible',
switch_d_cov = ~X2 + X4,
outcome_cov = ~X2 + X4, model_var = c('assigned_treatment'),
use_weight=T, use_censor=T, quiet = T,
save_weight_models = F,
data_dir = data_direction)
weights <- rbind(weights, c('Low', as.numeric(scenarios[i,1]), as.numeric(scenarios[i,2]),as.numeric(scenarios[i,3]),
mean(PP_prep$data$weight), sd(PP_prep$data$weight), max(PP_prep$data$weight)))
}
View(weights)
for(i in 1:27){
simdata_censored<-DATA_GEN_censored_reduced(as.numeric(scenarios[i,1]), 5,
conf = as.numeric(scenarios[i,2]),
treat_prev = as.numeric(scenarios[i,3]),
outcome_prev = -3.8,
censor = F)
PP_prep <- TrialEmulation::data_preparation(simdata_censored, id='ID', period='t', treatment='A', outcome='Y',
eligible ='eligible',
switch_d_cov = ~X2 + X4,
outcome_cov = ~X2 + X4, model_var = c('assigned_treatment'),
use_weight=T, use_censor=T, quiet = T,
save_weight_models = F,
data_dir = data_direction)
weights <- rbind(weights, c('Medium', as.numeric(scenarios[i,1]), as.numeric(scenarios[i,2]),as.numeric(scenarios[i,3]),
mean(PP_prep$data$weight), sd(PP_prep$data$weight), max(PP_prep$data$weight)))
}
for(i in 1:27){
simdata_censored<-DATA_GEN_censored_reduced(as.numeric(scenarios[i,1]), 5,
conf = as.numeric(scenarios[i,2]),
treat_prev = as.numeric(scenarios[i,3]),
outcome_prev = -3,
censor = F)
PP_prep <- TrialEmulation::data_preparation(simdata_censored, id='ID', period='t', treatment='A', outcome='Y',
eligible ='eligible',
switch_d_cov = ~X2 + X4,
outcome_cov = ~X2 + X4, model_var = c('assigned_treatment'),
use_weight=T, use_censor=T, quiet = T,
save_weight_models = F,
data_dir = data_direction)
weights <- rbind(weights, c('High', as.numeric(scenarios[i,1]), as.numeric(scenarios[i,2]),as.numeric(scenarios[i,3]),
mean(PP_prep$data$weight), sd(PP_prep$data$weight), max(PP_prep$data$weight)))
}
colnames(weights) <- c('Outcome_prevalence', 'Sample_size', 'Confounding', 'Treatment_prevalence', 'Mean', 'SD',
'Max')
library(xtable)
print(xtable(weights, type = 'latex'))
?xtable
print(xtable(weights, type = 'latex', digits = 2))
print(xtable(weights, type = 'latex', digits = c(0,0,0,0,2,2,2)))
print(xtable(weights, type = 'latex', digits = c(0,0,0,0,0,2,2,2)))
print(xtable(weights, type = 'latex', digits = c(0,0,0,0,0,3,3,3)))
?print()
print(xtable(weights, type = 'latex'), digits = 3
)
print.table(xtable(weights, type = 'latex'), digits = 3
)
print(xtable(weights, type = 'latex'), digits = 2)
print(xtable(weights, type = 'latex', digits = 0))
print(xtable(round(weights,2), type = 'latex', digits = 0))
round(weights,2)
weights$Mean <- round((weights$Mean), 2)
?round
weights$Mean
weights$Mean <- as.numeric(weights$Mean)
weights$SD <- as.numeric(weights$SD)
weights$Max <- as.numeric(weights$Max)
print(xtable(weights, type = 'latex', digits = c(0,0,0,0,0,2,2,2)))
print(xtable(weights, type = 'latex', digits = c(0,0,0,0,0,2,2,2)),include.rownames=FALSE)
for(i in 1:27){
simdata_censored<-DATA_GEN_censored_reduced(as.numeric(scenarios[i,1]), 5,
conf = as.numeric(scenarios[i,2]),
treat_prev = as.numeric(scenarios[i,3]),
outcome_prev = -4.7,
censor = F)
PP_prep <- TrialEmulation::data_preparation(simdata_censored, id='ID', period='t', treatment='A', outcome='Y',
eligible ='eligible',
switch_d_cov = ~X2 + X4,
outcome_cov = ~X2 + X4, model_var = c('assigned_treatment'),
use_weight=T, use_censor=T, quiet = T,
save_weight_models = F,
data_dir = data_direction)
weights <- rbind(weights, c('Low', as.numeric(scenarios[i,1]), as.numeric(scenarios[i,3]),as.numeric(scenarios[i,2]),
mean(PP_prep$data$weight), sd(PP_prep$data$weight), max(PP_prep$data$weight)))
}
library(tidyverse)
library(tidyr)
setwd("/Users/juliette/Documents/MPhil PHS 21-22/Multiple-trial-emulation-IPTW-MSM-CIs/Code")
library(ggplot2)
library(ggpubr)
load("HPC output/true_value_red_newsimus.rda")
library(modelr)
library(tidyverse)
library(tidyr)
library(MASS)
library(sandwich)
library(foreach)
library(doParallel)
library(parallel)
library(survival)
library(survminer)
library(lubridate)
library(ggplot2)
library(pammtools)
library(doRNG)
library(matrixStats)
library(latex2exp)
library(grDevices)
library(xtable)
bootstrap <- array(,dim = c(5,2,1000,27,3))
LEF_outcome <- array(,dim = c(5,2,1000,27,3))
LEF_both <- array(,dim = c(5,2,1000,27,3))
sandwich <- array(,dim = c(5,2,1000,27,3))
time <- array(,dim = c(4,1000,27,3))
est <- array(,dim = c(5,1000,27,3))
treat_pos <- c(-1,-0.8,-0.5,-0.2,0,0.2,0.5,0.8,1)
outcomes <- c("low", 'med', 'high')
size <- c(200,1000,5000)
treat <- c(-1,0,1)
conf <- c(0.1,0.5,0.9)
scenarios <- as.data.frame(tidyr::crossing(size,conf, treat))
bias_point <- array(,dim = c(5,27,3))
sd_point <- array(,dim = c(5,27,3))
mean_time <- data.frame(matrix(,nrow = 0, ncol = 8))
true_value_red <- -true_value_red
for (i in 1:27){
for (j in 1:3){
load(paste0("HPC output/CI_bootstrap_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/CI_LEF_outcome_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/CI_LEF_both_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/CI_sandwich_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/computation_time_",outcomes[j],'_', i, ".rda"))
load(paste0('HPC output/estimates_red_',outcomes[j],'_',i, '.rda'))
bootstrap[,,,i,j] <- CI_bootstrap_PP_red
LEF_outcome[,,,i,j] <- CI_LEF_outcome_PP_red
LEF_both[,,,i,j] <- CI_LEF_both_PP_red
sandwich[,,,i,j] <- CI_sandwich_PP_red
mean_time <- rbind(mean_time, c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3], rowMeans(computation_time, na.rm = TRUE)))
scenario <- i%%9
est[,,i,j] <- -estimates
if (scenario ==0){scenario <- 9}
bias_point[,i,j] <- rowMeans(-estimates, na.rm = TRUE) - true_value_red[,scenario,j]
sd_point[,i,j] <- rowSds(-estimates, na.rm = TRUE)
}
}
colnames(mean_time) <- c('Outcome_prevalence', 'Sample_size', 'Confounding', 'Treatment_prevalence', 'Bootstrap', 'LEF_outcome',
'LEF_both', 'Sandwich')
mean_time <- mean_time %>%
dplyr::mutate(Sample_size = as.numeric(Sample_size),
Confounding = as.numeric(Confounding),
Treatment_prevalence = as.numeric(Treatment_prevalence),
Bootstrap = as.numeric(Bootstrap)/as.numeric(Sandwich),
LEF_outcome = as.numeric(LEF_outcome)/as.numeric(Sandwich),
LEF_both = as.numeric(LEF_both)/as.numeric(Sandwich),
Sandwich = 1) %>%
dplyr::group_by(Outcome_prevalence,Sample_size) %>%
dplyr::summarise(Bootstrap = mean(Bootstrap),
LEF_outcome = mean(LEF_outcome),
LEF_both = mean(LEF_both),
sandwich = 1)
################WEIGHTS########################
weights <- data.frame(matrix(,nrow = 0, ncol = 7))
for(i in 1:27){
simdata_censored<-DATA_GEN_censored_reduced(as.numeric(scenarios[i,1]), 5,
conf = as.numeric(scenarios[i,2]),
treat_prev = as.numeric(scenarios[i,3]),
outcome_prev = -4.7,
censor = F)
PP_prep <- TrialEmulation::data_preparation(simdata_censored, id='ID', period='t', treatment='A', outcome='Y',
eligible ='eligible',
switch_d_cov = ~X2 + X4,
outcome_cov = ~X2 + X4, model_var = c('assigned_treatment'),
use_weight=T, use_censor=T, quiet = T,
save_weight_models = F,
data_dir = data_direction)
weights <- rbind(weights, c('Low', as.numeric(scenarios[i,1]), as.numeric(scenarios[i,3]),as.numeric(scenarios[i,2]),
mean(PP_prep$data$weight), sd(PP_prep$data$weight), max(PP_prep$data$weight)))
}
for(i in 1:27){
simdata_censored<-DATA_GEN_censored_reduced(as.numeric(scenarios[i,1]), 5,
conf = as.numeric(scenarios[i,2]),
treat_prev = as.numeric(scenarios[i,3]),
outcome_prev = -3.8,
censor = F)
PP_prep <- TrialEmulation::data_preparation(simdata_censored, id='ID', period='t', treatment='A', outcome='Y',
eligible ='eligible',
switch_d_cov = ~X2 + X4,
outcome_cov = ~X2 + X4, model_var = c('assigned_treatment'),
use_weight=T, use_censor=T, quiet = T,
save_weight_models = F,
data_dir = data_direction)
weights <- rbind(weights, c('Medium', as.numeric(scenarios[i,1]),as.numeric(scenarios[i,3]),as.numeric(scenarios[i,2]),
mean(PP_prep$data$weight), sd(PP_prep$data$weight), max(PP_prep$data$weight)))
}
for(i in 1:27){
simdata_censored<-DATA_GEN_censored_reduced(as.numeric(scenarios[i,1]), 5,
conf = as.numeric(scenarios[i,2]),
treat_prev = as.numeric(scenarios[i,3]),
outcome_prev = -3,
censor = F)
PP_prep <- TrialEmulation::data_preparation(simdata_censored, id='ID', period='t', treatment='A', outcome='Y',
eligible ='eligible',
switch_d_cov = ~X2 + X4,
outcome_cov = ~X2 + X4, model_var = c('assigned_treatment'),
use_weight=T, use_censor=T, quiet = T,
save_weight_models = F,
data_dir = data_direction)
weights <- rbind(weights, c('High', as.numeric(scenarios[i,1]), as.numeric(scenarios[i,3]),as.numeric(scenarios[i,2]),
mean(PP_prep$data$weight), sd(PP_prep$data$weight), max(PP_prep$data$weight)))
}
colnames(weights) <- c('Outcome_prevalence','Sample_size', 'Treatment_prevalence', 'Confounding', 'Mean', 'SD',
'Max')
weights$Mean <- as.numeric(weights$Mean)
weights$SD <- as.numeric(weights$SD)
weights$Max <- as.numeric(weights$Max)
View(weights)
print(xtable(weights %>% filter(Sample_size == 200) %>% select(-Sample_size), type = 'latex', digits = c(0,0,0,0,2,2,2)),include.rownames=FALSE)
print(xtable(weights %>% filter(Sample_size == 1000) %>% select(-Sample_size), type = 'latex', digits = c(0,0,0,0,2,2,2)),include.rownames=FALSE)
print(xtable(weights %>% filter(Sample_size == 5000) %>% select(-Sample_size), type = 'latex', digits = c(0,0,0,0,2,2,2)),include.rownames=FALSE)
