library(survminer)
library(lubridate)
library(ggplot2)
library(pammtools)
library(doRNG)
library(matrixStats)
bootstrap <- array(,dim = c(5,2,1000,27,3))
LEF_outcome <- array(,dim = c(5,2,1000,27,3))
LEF_both <- array(,dim = c(5,2,1000,27,3))
sandwich <- array(,dim = c(5,2,1000,27,3))
time <- array(,dim = c(4,1000,27,3))
est <- array(,dim = c(5,1000,27,3))
treat_pos <- c(-1,-0.8,-0.5,-0.2,0,0.2,0.5,0.8,1)
outcomes <- c("low", 'med', 'high')
bias_point <- array(,dim = c(5,27,3))
sd_point <- array(,dim = c(5,27,3))
mean_time_coefs <- array(,dim = c(4,27,3))
for (i in 1:27){
for (j in 1:3){
load(paste0("HPC output/CI_bootstrap_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/CI_LEF_outcome_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/CI_LEF_both_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/CI_sandwich_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/computation_time_",outcomes[j],'_', i, ".rda"))
load(paste0('HPC output/estimates_red_',outcomes[j],'_',i, '.rda'))
bootstrap[,,,i,j] <- CI_bootstrap_PP_red
LEF_outcome[,,,i,j] <- CI_LEF_outcome_PP_red
LEF_both[,,,i,j] <- CI_LEF_both_PP_red
sandwich[,,,i,j] <- CI_sandwich_PP_red
mean_time[,i,j] <- rowMeans(computation_time, na.rm = TRUE)
scenario <- i%%9
if (scenario ==0){scenario <- 9}
bias_point[,i,j] <- rowMeans(estimates, na.rm = TRUE) - true_value_red[,scenario,j]
sd_point[,i,j] <- rowSds(estimates, na.rm = TRUE)
}
}
library(tidyverse)
library(tidyr)
setwd("/Users/juliette/Documents/MPhil PHS 21-22/Multiple-trial-emulation-IPTW-MSM-CIs/Code")
library(ggplot2)
library(ggpubr)
load("HPC output/true_value_red_newsimus.rda")
library(modelr)
library(tidyverse)
library(tidyr)
library(MASS)
library(sandwich)
library(foreach)
library(doParallel)
library(parallel)
library(survival)
library(survminer)
library(lubridate)
library(ggplot2)
library(pammtools)
library(doRNG)
library(matrixStats)
bootstrap <- array(,dim = c(5,2,1000,27,3))
LEF_outcome <- array(,dim = c(5,2,1000,27,3))
LEF_both <- array(,dim = c(5,2,1000,27,3))
sandwich <- array(,dim = c(5,2,1000,27,3))
time <- array(,dim = c(4,1000,27,3))
est <- array(,dim = c(5,1000,27,3))
treat_pos <- c(-1,-0.8,-0.5,-0.2,0,0.2,0.5,0.8,1)
outcomes <- c("low", 'med', 'high')
bias_point <- array(,dim = c(5,27,3))
sd_point <- array(,dim = c(5,27,3))
mean_time <- array(,dim = c(4,27,3))
for (i in 1:27){
for (j in 1:3){
load(paste0("HPC output/CI_bootstrap_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/CI_LEF_outcome_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/CI_LEF_both_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/CI_sandwich_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/computation_time_",outcomes[j],'_', i, ".rda"))
load(paste0('HPC output/estimates_red_',outcomes[j],'_',i, '.rda'))
bootstrap[,,,i,j] <- CI_bootstrap_PP_red
LEF_outcome[,,,i,j] <- CI_LEF_outcome_PP_red
LEF_both[,,,i,j] <- CI_LEF_both_PP_red
sandwich[,,,i,j] <- CI_sandwich_PP_red
mean_time[,i,j] <- rowMeans(computation_time, na.rm = TRUE)
scenario <- i%%9
if (scenario ==0){scenario <- 9}
bias_point[,i,j] <- rowMeans(estimates, na.rm = TRUE) - true_value_red[,scenario,j]
sd_point[,i,j] <- rowSds(estimates, na.rm = TRUE)
}
}
################# COMPUTATION TIME PLOTS ##################
p1 <- ggplot() +
geom_line(aes(x = 1:9/10, y = mean_time[1,], colour = "Bootstrap")) +
geom_point(aes(x = 1:9/10, y = mean_time[1,], colour = "Bootstrap")) +
geom_line(aes(x = 1:9/10, y = mean_time[2,], colour = "LEF outcome")) +
geom_point(aes(x = 1:9/10, y = mean_time[2,], colour = "LEF outcome")) +
geom_line(aes(x = 1:9/10, y = mean_time[3,], colour = "LEF both")) +
geom_point(aes(x = 1:9/10, y = mean_time[3,], colour = "LEF both")) +
geom_line(aes(x = 1:9/10, y = mean_time[4,], colour = "Sandwich")) +
geom_point(aes(x = 1:9/10, y = mean_time[4,], colour = "Sandwich")) +
scale_color_manual(name = "CI type", values = c("Bootstrap"= "red", "Sandwich" = "blue",
"LEF outcome" = "green", "LEF both" = "purple")) +
labs(x = 'Confounding strength\n(N = 1000, Treat. prev. = 0)',
y = "Mean computation time") + theme(aspect.ratio = 1, axis.title = element_text(size = 10))
data.frame(matrix(mean_time, nrow=27*3, byrow=TRUE))
mean_time <- data.frame(,row.names('Outcome prevalemce', 'Sample size', 'Confounding', 'Treatment prevalence'))
mean_time <- data.frame(NA,row.names('Outcome prevalemce', 'Sample size', 'Confounding', 'Treatment prevalence'))
mean_time <- data.frame(NA,row.names = c('Outcome prevalemce', 'Sample size', 'Confounding', 'Treatment prevalence'))
mean_time <- data.frame(c(0,0,0,0),row.names = c('Outcome prevalemce', 'Sample size', 'Confounding', 'Treatment prevalence'))
View(mean_time)
mean_time <- data.frame(c(0,0,0,0),column.names = c('Outcome prevalemce', 'Sample size', 'Confounding', 'Treatment prevalence'))
View(mean_time)
mean_time <- data.frame('Outcome prevalemce' = NA, 'Sample size' = NA, 'Confounding' = NA, 'Treatment prevalence' = NA)
mean_time[1,]
size <- c(200,1000,5000)
treat <- c(-1,0,1)
conf <- c(0.1,0.5,0.9)
scenarios <- tidyr::crossing(size,conf, treat)
}
library(tidyverse)
library(tidyr)
setwd("/Users/juliette/Documents/MPhil PHS 21-22/Multiple-trial-emulation-IPTW-MSM-CIs/Code")
library(ggplot2)
library(ggpubr)
load("HPC output/true_value_red_newsimus.rda")
library(modelr)
library(tidyverse)
library(tidyr)
library(MASS)
library(sandwich)
library(foreach)
library(doParallel)
library(parallel)
library(survival)
library(survminer)
library(lubridate)
library(ggplot2)
library(pammtools)
library(doRNG)
library(matrixStats)
bootstrap <- array(,dim = c(5,2,1000,27,3))
LEF_outcome <- array(,dim = c(5,2,1000,27,3))
LEF_both <- array(,dim = c(5,2,1000,27,3))
sandwich <- array(,dim = c(5,2,1000,27,3))
time <- array(,dim = c(4,1000,27,3))
est <- array(,dim = c(5,1000,27,3))
treat_pos <- c(-1,-0.8,-0.5,-0.2,0,0.2,0.5,0.8,1)
outcomes <- c("low", 'med', 'high')
size <- c(200,1000,5000)
treat <- c(-1,0,1)
conf <- c(0.1,0.5,0.9)
scenarios <- tidyr::crossing(size,conf, treat)
bias_point <- array(,dim = c(5,27,3))
sd_point <- array(,dim = c(5,27,3))
mean_time <- data.frame('Outcome prevalemce' = NA, 'Sample size' = NA, 'Confounding' = NA,
'Treatment prevalence' = NA, 'Bootstrap' = NA, 'LEF outcome' = NA,
'LEF both' = NA, 'Sandwich' = NA)
for (i in 1:27){
for (j in 1:3){
load(paste0("HPC output/CI_bootstrap_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/CI_LEF_outcome_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/CI_LEF_both_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/CI_sandwich_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/computation_time_",outcomes[j],'_', i, ".rda"))
load(paste0('HPC output/estimates_red_',outcomes[j],'_',i, '.rda'))
bootstrap[,,,i,j] <- CI_bootstrap_PP_red
LEF_outcome[,,,i,j] <- CI_LEF_outcome_PP_red
LEF_both[,,,i,j] <- CI_LEF_both_PP_red
sandwich[,,,i,j] <- CI_sandwich_PP_red
mean_time <- rbind(mean_time, cbind(cbind(outcomes[j], scenarios[i,]), rowMeans(computation_time, na.rm = TRUE)))
scenario <- i%%9
if (scenario ==0){scenario <- 9}
bias_point[,i,j] <- rowMeans(estimates, na.rm = TRUE) - true_value_red[,scenario,j]
sd_point[,i,j] <- rowSds(estimates, na.rm = TRUE)
}
}
cbind(cbind(outcomes[j], scenarios[i,]), rowMeans(computation_time, na.rm = TRUE))
(cbind(outcomes[j], scenarios[i,])
cbind(outcomes[j], scenarios[i,])
rowMeans(computation_time, na.rm = TRUE)
cbind(outcomes[j], as.numeric(scenarios[i,]))
cbind(as.numeric(outcomes[j]), as.numeric(scenarios[i,]))
scenarios[i,]
unlist(scenarios[i,])
dim(rowMeans(computation_time, na.rm = TRUE))
cbind(outcomes[j], scenarios[i,])
rowMeans(computation_time, na.rm = TRUE)
cbind(cbind(outcomes[j], scenarios[i,]), rowMeans(computation_time, na.rm = TRUE))
as.data.frame(rowMeans(computation_time, na.rm = TRUE))
as.data.frame(rowMeans(computation_time, na.rm = TRUE).T)
as.data.frame(rowMeans(computation_time, na.rm = TRUE)).T
t(as.data.frame(rowMeans(computation_time, na.rm = TRUE)))
cbind(cbind(outcomes[j], scenarios[i,]), t(as.data.frame(rowMeans(computation_time, na.rm = TRUE))))
rbind(mean_time, cbind(cbind(outcomes[j], scenarios[i,]), t(as.data.frame(rowMeans(computation_time, na.rm = TRUE)))))
mean_time <- rbind(mean_time, cbind(cbind(outcomes[j], scenarios[i,]), t(as.data.frame(rowMeans(computation_time, na.rm = TRUE))),deparse.level = 0))
rbind(mean_time, cbind(cbind(outcomes[j], scenarios[i,]), t(as.data.frame(rowMeans(computation_time, na.rm = TRUE))),deparse.level = 0))
rbind(mean_time, cbind(cbind(outcomes[j], scenarios[i,], deparse.level = 0),
t(as.data.frame(rowMeans(computation_time, na.rm = TRUE))),
deparse.level = 0))
c(outcome[j], scenarios[i,1], scearios[i,2], scenarios[i,3])
c(outcomes[j], scenarios[i,1], scearios[i,2], scenarios[i,3])
c(outcomes[j], scenarios[i,1], scenarios[i,2], scenarios[i,3])
mean_time <- rbind(mean_time, c(outcomes[j], scenarios[i,1], scenarios[i,2], scenarios[i,3],0,0,0,0))
(scenarios[i,1]
scenarios[i,1]
scenarios <- as.data.frame(tidyr::crossing(size,conf, treat))
scenarios[i,1]
c(outcomes[j], as.numeric(scenarios[i,1]), scenarios[i,2], scenarios[i,3],0,0,0,0)
cbind(c(outcomes[j], as.numeric(scenarios[i,1]), scenarios[i,2], rowMeans(computation_time, na.rm = TRUE))
cbind(c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3]), rowMeans(computation_time, na.rm = TRUE))
c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3])
c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3], rowMeans(computation_time, na.rm = TRUE))
mean_time <- rbind(mean_time, c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3], rowMeans(computation_time, na.rm = TRUE)))
mean_time
mean_time <- data.frame()
colnames(mean_time) <- c('Outcome prevalemce', 'Sample size', 'Confounding', 'Treatment prevalence', 'Bootstrap', 'LEF outcome',
'LEF both', 'Sandwich')
mean_time <- data.frame(matrix(,nrow = 0, ncol = 8))
colnames(mean_time) <- c('Outcome prevalemce', 'Sample size', 'Confounding', 'Treatment prevalence', 'Bootstrap', 'LEF outcome',
'LEF both', 'Sandwich')
for (i in 1:27){
for (j in 1:3){
load(paste0("HPC output/CI_bootstrap_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/CI_LEF_outcome_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/CI_LEF_both_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/CI_sandwich_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/computation_time_",outcomes[j],'_', i, ".rda"))
load(paste0('HPC output/estimates_red_',outcomes[j],'_',i, '.rda'))
bootstrap[,,,i,j] <- CI_bootstrap_PP_red
LEF_outcome[,,,i,j] <- CI_LEF_outcome_PP_red
LEF_both[,,,i,j] <- CI_LEF_both_PP_red
sandwich[,,,i,j] <- CI_sandwich_PP_red
mean_time <- rbind(mean_time, c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3], rowMeans(computation_time, na.rm = TRUE)))
scenario <- i%%9
if (scenario ==0){scenario <- 9}
bias_point[,i,j] <- rowMeans(estimates, na.rm = TRUE) - true_value_red[,scenario,j]
sd_point[,i,j] <- rowSds(estimates, na.rm = TRUE)
}
}
colnames(mean_time) <- c('Outcome prevalemce', 'Sample size', 'Confounding', 'Treatment prevalence', 'Bootstrap', 'LEF outcome',
'LEF both', 'Sandwich')
if (is.na(bootstrap[k,1,i,j,l]) == F){
success[1,k,j,l] <- success[1,k,j,l] + 1
if (all(bootstrap[k,1,i,j,l] <= true_value_red[k,] - true_value_red[k,2,j])
& all(bootstrap[k,2,i,j] >= true_value_red[k,1,j] - true_value_red[k,2,j])){
coverage_ind[1,j,k] <- coverage_ind[1,j,k] + 1
}
}
coverage_ind <- array(0,dim = c(4,5,27,3))
success <- array(0,dim = c(4,5,27,3))
for (i in 1:1000){
for (k in 1:5){
for (j in 1:27){
for (l in 1:3){
scenario <- j%%9
if (scenario ==0){scenario <- 9}
if (is.na(bootstrap[k,1,i,j,l]) == F){
success[1,k,j,l] <- success[1,k,j,l] + 1
if (all(bootstrap[k,1,i,j,l] <= true_value_red[k,scenario, l])
& all(bootstrap[k,2,i,j,l] >= true_value_red[k,scenario, l])){
coverage_ind[1,k,j,l] <- coverage_ind[1,k,j,l] + 1
}
}
if (is.na(LEF_outcome[k,1,i,j,l]) == F){
success[2,k,j,l] <- success[2,k,j,l] + 1
if (all(LEF_outcome[k,1,i,j,l] <= true_value_red[k,scenario, l])
& all(LEF_outcome[k,2,i,j,l] >= true_value_red[k,scenario, l])){
coverage_ind[2,k,j,l] <- coverage_ind[2,k,j,l] + 1
}
}
if (is.na(LEF_both[k,1,i,j,l]) == F){
success[3,k,j,l] <- success[3,k,j,l] + 1
if (all(LEF_both[k,1,i,j,l] <= true_value_red[k,scenario, l])
& all(LEF_both[k,2,i,j,l] >= true_value_red[k,scenario, l])){
coverage_ind[3,k,j,l] <- coverage_ind[3,k,j,l] + 1
}
}
if (all(is.na(sandwich[k,1,i,j,l])) == F){
success[4,k,j,l] <- success[4,k,j,l] + 1
if (all(sandwich[k,1,i,j,l] <= true_value_red[k,scenario, l])
& all(sandwich[k,2,i,j,l] >= true_value_red[k,scenario, l])){
coverage_ind[4,k,j,l]<- coverage_ind[4,k,j,l]+ 1
}
}
}
}
}
}
coverage_ind <- coverage_ind/success
coverage_ind[,,23,3]
coverage_ind[,,23,2]
coverage_ind[,,23,1]
tidyr::crossing(conf, treat)
tidyr::crossing(size,conf, treat)
?data_preparation
?data_modelling
simdata_censored<-DATA_GEN_censored_reduced(as.numeric(scenarios[l,1]), 5,
conf = as.numeric(scenarios[l,2]),
treat_prev = as.numeric(scenarios[l,3]),
outcome_prev = -3.8,
censor = F)
source("simulate_MSM_simplified.R")
simdata_censored<-DATA_GEN_censored_reduced(as.numeric(scenarios[l,1]), 5,
conf = as.numeric(scenarios[l,2]),
treat_prev = as.numeric(scenarios[l,3]),
outcome_prev = -3.8,
censor = F)
View(simdata_censored)
PP_prep <- TrialEmulation::data_preparation(simdata_censored, id='ID', period='t', treatment='A', outcome='Y',
eligible ='eligible',
switch_d_cov = ~X2 + X4,
outcome_cov = ~X2 + X4, model_var = c('assigned_treatment'),
include_regime_length = F,
use_weight=1, use_censor=1, quiet = T,
save_weight_models = T,
data_dir = data_direction)
data_direction = getwd()
PP_prep <- TrialEmulation::data_preparation(simdata_censored, id='ID', period='t', treatment='A', outcome='Y',
eligible ='eligible',
switch_d_cov = ~X2 + X4,
outcome_cov = ~X2 + X4, model_var = c('assigned_treatment'),
include_regime_length = F,
use_weight=1, use_censor=1, quiet = T,
save_weight_models = T,
data_dir = data_direction)
View(PP_prep)
PP_prep$data
View(PP_prep$data)
PP_prep <- TrialEmulation::data_preparation(simdata_censored, id='ID', period='t', treatment='A', outcome='Y',
eligible ='eligible',
switch_d_cov = ~X2 + X4,
outcome_cov = ~X2 + X4, model_var = c('assigned_treatment'),
include_regime_length = F,
use_weight=1, use_censor=0, quiet = T,
save_weight_models = T,
data_dir = data_direction)
View(PP_prep$data)
View(PP_prep)
library(tidyverse)
library(tidyr)
setwd("/Users/juliette/Documents/MPhil PHS 21-22/Multiple-trial-emulation-IPTW-MSM-CIs/Code")
library(ggplot2)
library(ggpubr)
load("HPC output/true_value_red_newsimus.rda")
library(modelr)
library(tidyverse)
library(tidyr)
library(MASS)
library(sandwich)
library(foreach)
library(doParallel)
library(parallel)
library(survival)
library(survminer)
library(lubridate)
library(ggplot2)
library(pammtools)
library(doRNG)
library(matrixStats)
bootstrap <- array(,dim = c(5,2,1000,27,3))
LEF_outcome <- array(,dim = c(5,2,1000,27,3))
LEF_both <- array(,dim = c(5,2,1000,27,3))
sandwich <- array(,dim = c(5,2,1000,27,3))
time <- array(,dim = c(4,1000,27,3))
est <- array(,dim = c(5,1000,27,3))
treat_pos <- c(-1,-0.8,-0.5,-0.2,0,0.2,0.5,0.8,1)
outcomes <- c("low", 'med', 'high')
size <- c(200,1000,5000)
treat <- c(-1,0,1)
conf <- c(0.1,0.5,0.9)
scenarios <- as.data.frame(tidyr::crossing(size,conf, treat))
bias_point <- array(,dim = c(5,27,3))
sd_point <- array(,dim = c(5,27,3))
mean_time <- data.frame(matrix(,nrow = 0, ncol = 8))
for (i in 1:27){
for (j in 1:3){
load(paste0("HPC output/CI_bootstrap_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/CI_LEF_outcome_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/CI_LEF_both_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/CI_sandwich_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/computation_time_",outcomes[j],'_', i, ".rda"))
load(paste0('HPC output/estimates_red_',outcomes[j],'_',i, '.rda'))
bootstrap[,,,i,j] <- CI_bootstrap_PP_red
LEF_outcome[,,,i,j] <- CI_LEF_outcome_PP_red
LEF_both[,,,i,j] <- CI_LEF_both_PP_red
sandwich[,,,i,j] <- CI_sandwich_PP_red
mean_time <- rbind(mean_time, c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3], rowMeans(computation_time, na.rm = TRUE)))
scenario <- i%%9
if (scenario ==0){scenario <- 9}
bias_point[,i,j] <- rowMeans(estimates, na.rm = TRUE) - true_value_red[,scenario,j]
sd_point[,i,j] <- rowSds(estimates, na.rm = TRUE)
}
}
colnames(mean_time) <- c('Outcome prevalemce', 'Sample size', 'Confounding', 'Treatment prevalence', 'Bootstrap', 'LEF outcome',
'LEF both', 'Sandwich')
################# COMPUTATION TIME PLOTS ##################
time_plots_low = lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 1:9/10, y = mean_time[1,], colour = "Bootstrap")) +
geom_point(aes(x = 1:9/10, y = mean_time[1,], colour = "Bootstrap")) +
geom_line(aes(x = 1:9/10, y = mean_time[2,], colour = "LEF outcome")) +
geom_point(aes(x = 1:9/10, y = mean_time[2,], colour = "LEF outcome")) +
geom_line(aes(x = 1:9/10, y = mean_time[3,], colour = "LEF both")) +
geom_point(aes(x = 1:9/10, y = mean_time[3,], colour = "LEF both")) +
geom_line(aes(x = 1:9/10, y = mean_time[4,], colour = "Sandwich")) +
geom_point(aes(x = 1:9/10, y = mean_time[4,], colour = "Sandwich")) +
scale_color_manual(name = "CI type", values = c("Bootstrap"= "red", "Sandwich" = "blue",
"LEF outcome" = "green", "LEF both" = "purple")) +
labs(x = 'Confounding strength\n(N = 1000, Treat. prev. = 0)',
y = "Mean computation time") + theme(aspect.ratio = 1, axis.title = element_text(size = 10))
})
############# COVERAGE #####################
coverage_ind <- array(0,dim = c(4,5,27,3))
success <- array(0,dim = c(4,5,27,3))
for (i in 1:1000){
for (k in 1:5){
for (j in 1:27){
for (l in 1:3){
scenario <- j%%9
if (scenario ==0){scenario <- 9}
if (is.na(bootstrap[k,1,i,j,l]) == F){
success[1,k,j,l] <- success[1,k,j,l] + 1
if (all(bootstrap[k,1,i,j,l] <= true_value_red[k,scenario, l])
& all(bootstrap[k,2,i,j,l] >= true_value_red[k,scenario, l])){
coverage_ind[1,k,j,l] <- coverage_ind[1,k,j,l] + 1
}
}
if (is.na(LEF_outcome[k,1,i,j,l]) == F){
success[2,k,j,l] <- success[2,k,j,l] + 1
if (all(LEF_outcome[k,1,i,j,l] <= true_value_red[k,scenario, l])
& all(LEF_outcome[k,2,i,j,l] >= true_value_red[k,scenario, l])){
coverage_ind[2,k,j,l] <- coverage_ind[2,k,j,l] + 1
}
}
if (is.na(LEF_both[k,1,i,j,l]) == F){
success[3,k,j,l] <- success[3,k,j,l] + 1
if (all(LEF_both[k,1,i,j,l] <= true_value_red[k,scenario, l])
& all(LEF_both[k,2,i,j,l] >= true_value_red[k,scenario, l])){
coverage_ind[3,k,j,l] <- coverage_ind[3,k,j,l] + 1
}
}
if (all(is.na(sandwich[k,1,i,j,l])) == F){
success[4,k,j,l] <- success[4,k,j,l] + 1
if (all(sandwich[k,1,i,j,l] <= true_value_red[k,scenario, l])
& all(sandwich[k,2,i,j,l] >= true_value_red[k,scenario, l])){
coverage_ind[4,k,j,l]<- coverage_ind[4,k,j,l]+ 1
}
}
}
}
}
}
coverage_ind <- coverage_ind/success
coverage_ind[,,23,3]
coverage_ind[,,17,3]
coverage_ind[,,4,3]
coverage_ind[,,27,3]
coverage_ind[,,12,3]
coverage_ind[,,12,2]
bias_point[,22,3]
bias_point[,22,2]
bias_point[,12,2]
bias_point[,12,3]
bias_point[,1,3]
bias_point[,,3]
################BIAS, SD, MSE PLOTS ###################
bias_plots_low = lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 0:4, y = bias_point[,i,1], colour = "Bootstrap")) +
geom_point(aes(x = 0:4, y = bias_point[,i,1], colour = "Bootstrap")) +
labs(x = paste0('N = ', scenarios[i,1], ', confounding = ', scenarios[i,2], ', \nTreat. prev. = ',scenarios[i,3]),
y = "Empirical bias") + theme(aspect.ratio = 1, axis.title = element_text(size = 10))
})
bias_plots_low[2]
bias_plots_med <- lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 0:4, y = bias_point[,i,2], colour = "Bootstrap")) +
geom_point(aes(x = 0:4, y = bias_point[,i,3], colour = "Bootstrap")) +
labs(x = paste0('N = ', scenarios[i,1], ', confounding = ', scenarios[i,2], ', \nTreat. prev. = ',scenarios[i,3]),
y = "Empirical bias") + theme(aspect.ratio = 1, axis.title = element_text(size = 10))
})
bias_plots_high <- lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 0:4, y = bias_point[,i,3], colour = "Bootstrap")) +
geom_point(aes(x = 0:4, y = bias_point[,i,3], colour = "Bootstrap")) +
labs(x = paste0('N = ', scenarios[i,1], ', confounding = ', scenarios[i,2], ', \nTreat. prev. = ',scenarios[i,3]),
y = "Empirical bias") + theme(aspect.ratio = 1, axis.title = element_text(size = 10))
})
bias_plots_high[1]
bias_plots_high[18]
bias_plots_high[16]
bias_point[,,3]
bias_plots_high <- lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 0:4, y = bias_point[,i,3], colour = "Bootstrap")) +
geom_point(aes(x = 0:4, y = bias_point[,i,3], colour = "Bootstrap")) +
labs(x = paste0('N = ', scenarios[i,1], ', confounding = ', scenarios[i,2], ', \nTreat. prev. = ',scenarios[i,3]),
y = "Empirical bias") + theme(aspect.ratio = 1, axis.title = element_text(size = 10))+  ylim(-0.1,0.1)
})
bias_plots_high[16]
bias_plots_high[1]
bias_plots_high[8]
ggplot() +
geom_line(aes(x = 0:4, y = bias_point[,i,3], colour = "Bootstrap")) +
geom_point(aes(x = 0:4, y = bias_point[,i,3], colour = "Bootstrap")) +
labs(x = paste0('N = ', scenarios[i,1], ', confounding = ', scenarios[i,2], ', \nTreat. prev. = ',scenarios[i,3]),
y = "Empirical bias") + theme(aspect.ratio = 1, axis.title = element_text(size = 10))+  ylim(-0.3,0.1)
bias_plots_high <- lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 0:4, y = bias_point[,i,3], colour = "Bootstrap")) +
geom_point(aes(x = 0:4, y = bias_point[,i,3], colour = "Bootstrap")) +
labs(x = paste0('N = ', scenarios[i,1], ', confounding = ', scenarios[i,2], ', \nTreat. prev. = ',scenarios[i,3]),
y = "Empirical bias") + theme(aspect.ratio = 1, axis.title = element_text(size = 10))+  ylim(-0.3,0.1)
})
bias_plots_high[8]
