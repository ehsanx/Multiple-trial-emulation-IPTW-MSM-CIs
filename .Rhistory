load("HPC output/true_value_red_newsimus.rda")
library(modelr)
library(tidyverse)
library(tidyr)
library(MASS)
library(sandwich)
library(foreach)
library(doParallel)
library(parallel)
library(survival)
library(survminer)
library(lubridate)
library(ggplot2)
library(pammtools)
library(doRNG)
library(matrixStats)
library(latex2exp)
library(grDevices)
library(xtable)
iters <- 1000
bootstrap <- array(,dim = c(5,2,iters,27,3))
LEF_outcome <- array(,dim = c(5,2,iters,27,3))
LEF_both <- array(,dim = c(5,2,iters,27,3))
sandwich <- array(,dim = c(5,2,iters,27,3))
jackknife_mvn <- array(,dim = c(5,2,iters,27,3))
jackknife_wald <- array(,dim = c(5,2,iters,27,3))
time <- array(,dim = c(6,iters,27,3))
est <- array(,dim = c(5,iters,27,3))
treat_pos <- c(-1,-0.8,-0.5,-0.2,0,0.2,0.5,0.8,1)
outcomes <- c("low", 'med', 'high')
size <- c(200,1000,5000)
treat <- c(-1,0,1)
conf <- c(0.1,0.5,0.9)
scenarios <- as.data.frame(tidyr::crossing(size,conf, treat))
bias_point <- array(,dim = c(5,27,3))
sd_point <- array(,dim = c(5,27,3))
mean_time <- data.frame(matrix(,nrow = 0, ncol = 10))
true_value_red <- -true_value_red
na_failure_rate <- data.frame(matrix(,nrow = 0, ncol = 7))
for (i in 1:27){
for (j in 1:3){
j <- 1
load(paste0("HPC output/NewSimus/J_CI_bootstrap_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_jackknife_mvn_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_jackknife_wald_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_LEF_outcome_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_LEF_both_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_sandwich_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_computation_time_",outcomes[j],'_', i, ".rda"))
load(paste0('HPC output/NewSimus/J_estimates_red_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimusJ/coeff_dim_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimusJ/bootstrap_nas_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimusJ/jackknife_nas_',outcomes[j],'_',i, '.rda'))
bootstrap[,,,i,j] <- CI_bootstrap_PP_red
LEF_outcome[,,,i,j] <- CI_LEF_outcome_PP_red
LEF_both[,,,i,j] <- CI_LEF_both_PP_red
sandwich[,,,i,j] <- CI_sandwich_PP_red
jackknife_mvn[,,,i,j] <- CI_jackknife_mvn_PP_red
jackknife_wald[,,,i,j] <- CI_jackknife_wald_PP_red
na_failure_rate <- rbind(mean_time, c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3],
rowMeans(coeff_dim, na.rm = TRUE),
rowMeans(bootstrap_nas, na.rm = TRUE),
rowMeans(jackknife_nas, na.rm = TRUE)
))
mean_time <- rbind(mean_time, c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3], rowMeans(computation_time, na.rm = TRUE)))
scenario <- i%%9
est[,,i,j] <- estimates
if (scenario ==0){scenario <- 9}
bias_point[,i,j] <- rowMeans(estimates, na.rm = TRUE) - true_value_red[,scenario,j]
sd_point[,i,j] <- rowSds(estimates, na.rm = TRUE)
}
}
for (i in 1:27){
for (j in 1:3){
j <- 1
load(paste0("HPC output/NewSimus/J_CI_bootstrap_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_jackknife_mvn_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_jackknife_wald_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_LEF_outcome_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_LEF_both_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_sandwich_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_computation_time_",outcomes[j],'_', i, ".rda"))
load(paste0('HPC output/NewSimus/J_estimates_red_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimus/coeff_dim_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimus/bootstrap_nas_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimus/jackknife_nas_',outcomes[j],'_',i, '.rda'))
bootstrap[,,,i,j] <- CI_bootstrap_PP_red
LEF_outcome[,,,i,j] <- CI_LEF_outcome_PP_red
LEF_both[,,,i,j] <- CI_LEF_both_PP_red
sandwich[,,,i,j] <- CI_sandwich_PP_red
jackknife_mvn[,,,i,j] <- CI_jackknife_mvn_PP_red
jackknife_wald[,,,i,j] <- CI_jackknife_wald_PP_red
na_failure_rate <- rbind(mean_time, c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3],
rowMeans(coeff_dim, na.rm = TRUE),
rowMeans(bootstrap_nas, na.rm = TRUE),
rowMeans(jackknife_nas, na.rm = TRUE)
))
mean_time <- rbind(mean_time, c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3], rowMeans(computation_time, na.rm = TRUE)))
scenario <- i%%9
est[,,i,j] <- estimates
if (scenario ==0){scenario <- 9}
bias_point[,i,j] <- rowMeans(estimates, na.rm = TRUE) - true_value_red[,scenario,j]
sd_point[,i,j] <- rowSds(estimates, na.rm = TRUE)
}
}
for (i in 1:27){
for (j in 1:3){
j <- 1
load(paste0("HPC output/NewSimus/J_CI_bootstrap_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_jackknife_mvn_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_jackknife_wald_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_LEF_outcome_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_LEF_both_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_sandwich_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_computation_time_",outcomes[j],'_', i, ".rda"))
load(paste0('HPC output/NewSimus/J_estimates_red_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimus/coeff_dim_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimus/bootstrap_nas_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimus/jackknife_nas_',outcomes[j],'_',i, '.rda'))
bootstrap[,,,i,j] <- CI_bootstrap_PP_red
LEF_outcome[,,,i,j] <- CI_LEF_outcome_PP_red
LEF_both[,,,i,j] <- CI_LEF_both_PP_red
sandwich[,,,i,j] <- CI_sandwich_PP_red
jackknife_mvn[,,,i,j] <- CI_jackknife_mvn_PP_red
jackknife_wald[,,,i,j] <- CI_jackknife_wald_PP_red
na_failure_rate <- rbind(mean_time, c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3],
mean(coeff_dim, na.rm = TRUE),
mean(bootstrap_nas, na.rm = TRUE),
mean(jackknife_nas, na.rm = TRUE)
))
mean_time <- rbind(mean_time, c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3], rowMeans(computation_time, na.rm = TRUE)))
scenario <- i%%9
est[,,i,j] <- estimates
if (scenario ==0){scenario <- 9}
bias_point[,i,j] <- rowMeans(estimates, na.rm = TRUE) - true_value_red[,scenario,j]
sd_point[,i,j] <- rowSds(estimates, na.rm = TRUE)
}
}
warnings()
library(tidyverse)
library(tidyr)
setwd("/Users/juliette/Documents/MPhil PHS 21-22/Multiple-trial-emulation-IPTW-MSM-CIs/Code")
library(ggplot2)
library(ggpubr)
load("HPC output/true_value_red_newsimus.rda")
library(modelr)
library(tidyverse)
library(tidyr)
library(MASS)
library(sandwich)
library(foreach)
library(doParallel)
library(parallel)
library(survival)
library(survminer)
library(lubridate)
library(ggplot2)
library(pammtools)
library(doRNG)
library(matrixStats)
library(latex2exp)
library(grDevices)
library(xtable)
iters <- 1000
bootstrap <- array(,dim = c(5,2,iters,27,3))
LEF_outcome <- array(,dim = c(5,2,iters,27,3))
LEF_both <- array(,dim = c(5,2,iters,27,3))
sandwich <- array(,dim = c(5,2,iters,27,3))
jackknife_mvn <- array(,dim = c(5,2,iters,27,3))
jackknife_wald <- array(,dim = c(5,2,iters,27,3))
time <- array(,dim = c(6,iters,27,3))
est <- array(,dim = c(5,iters,27,3))
treat_pos <- c(-1,-0.8,-0.5,-0.2,0,0.2,0.5,0.8,1)
outcomes <- c("low", 'med', 'high')
size <- c(200,1000,5000)
treat <- c(-1,0,1)
conf <- c(0.1,0.5,0.9)
scenarios <- as.data.frame(tidyr::crossing(size,conf, treat))
bias_point <- array(,dim = c(5,27,3))
sd_point <- array(,dim = c(5,27,3))
mean_time <- data.frame(matrix(,nrow = 0, ncol = 10))
true_value_red <- -true_value_red
na_failure_rate <- data.frame(matrix(,nrow = 0, ncol = 7))
for (i in 1:27){
for (j in 1:3){
j <- 1
load(paste0("HPC output/NewSimus/J_CI_bootstrap_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_jackknife_mvn_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_jackknife_wald_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_LEF_outcome_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_LEF_both_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_sandwich_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_computation_time_",outcomes[j],'_', i, ".rda"))
load(paste0('HPC output/NewSimus/J_estimates_red_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimus/coeff_dim_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimus/bootstrap_nas_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimus/jackknife_nas_',outcomes[j],'_',i, '.rda'))
bootstrap[,,,i,j] <- CI_bootstrap_PP_red
LEF_outcome[,,,i,j] <- CI_LEF_outcome_PP_red
LEF_both[,,,i,j] <- CI_LEF_both_PP_red
sandwich[,,,i,j] <- CI_sandwich_PP_red
jackknife_mvn[,,,i,j] <- CI_jackknife_mvn_PP_red
jackknife_wald[,,,i,j] <- CI_jackknife_wald_PP_red
na_failure_rate <- rbind(mean_time, c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3],
mean(coeff_dim, na.rm = TRUE),
mean(bootstrap_nas, na.rm = TRUE),
mean(jackknife_nas, na.rm = TRUE)
))
mean_time <- rbind(mean_time, c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3], rowMeans(computation_time, na.rm = TRUE)))
scenario <- i%%9
est[,,i,j] <- estimates
if (scenario ==0){scenario <- 9}
bias_point[,i,j] <- rowMeans(estimates, na.rm = TRUE) - true_value_red[,scenario,j]
sd_point[,i,j] <- rowSds(estimates, na.rm = TRUE)
}
}
warnings()
na_failure_rate <- data.frame(matrix(,nrow = 0, ncol = 7))
for (i in 1:27){
for (j in 1:3){
j <- 1
load(paste0("HPC output/NewSimus/J_CI_bootstrap_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_jackknife_mvn_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_jackknife_wald_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_LEF_outcome_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_LEF_both_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_sandwich_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_computation_time_",outcomes[j],'_', i, ".rda"))
load(paste0('HPC output/NewSimus/J_estimates_red_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimus/coeff_dim_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimus/bootstrap_nas_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimus/jackknife_nas_',outcomes[j],'_',i, '.rda'))
bootstrap[,,,i,j] <- CI_bootstrap_PP_red
LEF_outcome[,,,i,j] <- CI_LEF_outcome_PP_red
LEF_both[,,,i,j] <- CI_LEF_both_PP_red
sandwich[,,,i,j] <- CI_sandwich_PP_red
jackknife_mvn[,,,i,j] <- CI_jackknife_mvn_PP_red
jackknife_wald[,,,i,j] <- CI_jackknife_wald_PP_red
na_failure_rate <- rbind(mean_time, c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3],
mean(coeff_dim, na.rm = TRUE),
mean(bootstrap_nas, na.rm = TRUE),
mean(jackknife_nas, na.rm = TRUE)
))
mean_time <- rbind(mean_time, c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3], rowMeans(computation_time, na.rm = TRUE)))
scenario <- i%%9
est[,,i,j] <- estimates
if (scenario ==0){scenario <- 9}
bias_point[,i,j] <- rowMeans(estimates, na.rm = TRUE) - true_value_red[,scenario,j]
sd_point[,i,j] <- rowSds(estimates, na.rm = TRUE)
}
}
c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3],
mean(coeff_dim, na.rm = TRUE),
mean(bootstrap_nas, na.rm = TRUE),
mean(jackknife_nas, na.rm = TRUE)
)
for (i in 1:27){
for (j in 1:3){
j <- 1
load(paste0("HPC output/NewSimus/J_CI_bootstrap_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_jackknife_mvn_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_jackknife_wald_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_LEF_outcome_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_LEF_both_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_sandwich_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_computation_time_",outcomes[j],'_', i, ".rda"))
load(paste0('HPC output/NewSimus/J_estimates_red_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimus/coeff_dim_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimus/bootstrap_nas_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimus/jackknife_nas_',outcomes[j],'_',i, '.rda'))
bootstrap[,,,i,j] <- CI_bootstrap_PP_red
LEF_outcome[,,,i,j] <- CI_LEF_outcome_PP_red
LEF_both[,,,i,j] <- CI_LEF_both_PP_red
sandwich[,,,i,j] <- CI_sandwich_PP_red
jackknife_mvn[,,,i,j] <- CI_jackknife_mvn_PP_red
jackknife_wald[,,,i,j] <- CI_jackknife_wald_PP_red
na_failure_rate <- rbind(na_failure_rate, c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3],
mean(coeff_dim, na.rm = TRUE),
mean(bootstrap_nas, na.rm = TRUE),
mean(jackknife_nas, na.rm = TRUE)
))
mean_time <- rbind(mean_time, c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3], rowMeans(computation_time, na.rm = TRUE)))
scenario <- i%%9
est[,,i,j] <- estimates
if (scenario ==0){scenario <- 9}
bias_point[,i,j] <- rowMeans(estimates, na.rm = TRUE) - true_value_red[,scenario,j]
sd_point[,i,j] <- rowSds(estimates, na.rm = TRUE)
}
}
warnings()
library(tidyverse)
library(tidyr)
setwd("/Users/juliette/Documents/MPhil PHS 21-22/Multiple-trial-emulation-IPTW-MSM-CIs/Code")
library(ggplot2)
library(ggpubr)
load("HPC output/true_value_red_newsimus.rda")
library(modelr)
library(tidyverse)
library(tidyr)
library(MASS)
library(sandwich)
library(foreach)
library(doParallel)
library(parallel)
library(survival)
library(survminer)
library(lubridate)
library(ggplot2)
library(pammtools)
library(doRNG)
library(matrixStats)
library(latex2exp)
library(grDevices)
library(xtable)
iters <- 1000
bootstrap <- array(,dim = c(5,2,iters,27,3))
LEF_outcome <- array(,dim = c(5,2,iters,27,3))
LEF_both <- array(,dim = c(5,2,iters,27,3))
sandwich <- array(,dim = c(5,2,iters,27,3))
jackknife_mvn <- array(,dim = c(5,2,iters,27,3))
jackknife_wald <- array(,dim = c(5,2,iters,27,3))
time <- array(,dim = c(6,iters,27,3))
est <- array(,dim = c(5,iters,27,3))
treat_pos <- c(-1,-0.8,-0.5,-0.2,0,0.2,0.5,0.8,1)
outcomes <- c("low", 'med', 'high')
size <- c(200,1000,5000)
treat <- c(-1,0,1)
conf <- c(0.1,0.5,0.9)
scenarios <- as.data.frame(tidyr::crossing(size,conf, treat))
bias_point <- array(,dim = c(5,27,3))
sd_point <- array(,dim = c(5,27,3))
mean_time <- data.frame(matrix(,nrow = 0, ncol = 10))
true_value_red <- -true_value_red
na_failure_rate <- data.frame(matrix(,nrow = 0, ncol = 7))
for (i in 1:27){
for (j in 1:3){
j <- 1
load(paste0("HPC output/NewSimus/J_CI_bootstrap_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_jackknife_mvn_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_jackknife_wald_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_LEF_outcome_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_LEF_both_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_sandwich_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_computation_time_",outcomes[j],'_', i, ".rda"))
load(paste0('HPC output/NewSimus/J_estimates_red_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimus/coeff_dim_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimus/bootstrap_nas_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimus/jackknife_nas_',outcomes[j],'_',i, '.rda'))
bootstrap[,,,i,j] <- CI_bootstrap_PP_red
LEF_outcome[,,,i,j] <- CI_LEF_outcome_PP_red
LEF_both[,,,i,j] <- CI_LEF_both_PP_red
sandwich[,,,i,j] <- CI_sandwich_PP_red
jackknife_mvn[,,,i,j] <- CI_jackknife_mvn_PP_red
jackknife_wald[,,,i,j] <- CI_jackknife_wald_PP_red
na_failure_rate <- rbind(na_failure_rate, c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3],
mean(coeff_dim, na.rm = TRUE),
mean(bootstrap_nas, na.rm = TRUE),
mean(jackknife_nas, na.rm = TRUE)
))
mean_time <- rbind(mean_time, c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3], rowMeans(computation_time, na.rm = TRUE)))
scenario <- i%%9
est[,,i,j] <- estimates
if (scenario ==0){scenario <- 9}
bias_point[,i,j] <- rowMeans(estimates, na.rm = TRUE) - true_value_red[,scenario,j]
sd_point[,i,j] <- rowSds(estimates, na.rm = TRUE)
}
}
View(na_failure_rate)
library(tidyverse)
library(tidyr)
setwd("/Users/juliette/Documents/MPhil PHS 21-22/Multiple-trial-emulation-IPTW-MSM-CIs/Code")
library(ggplot2)
library(ggpubr)
load("HPC output/true_value_red_newsimus.rda")
library(modelr)
library(tidyverse)
library(tidyr)
library(MASS)
library(sandwich)
library(foreach)
library(doParallel)
library(parallel)
library(survival)
library(survminer)
library(lubridate)
library(ggplot2)
library(pammtools)
library(doRNG)
library(matrixStats)
library(latex2exp)
library(grDevices)
library(xtable)
iters <- 1000
bootstrap <- array(,dim = c(5,2,iters,27,3))
LEF_outcome <- array(,dim = c(5,2,iters,27,3))
LEF_both <- array(,dim = c(5,2,iters,27,3))
sandwich <- array(,dim = c(5,2,iters,27,3))
jackknife_mvn <- array(,dim = c(5,2,iters,27,3))
jackknife_wald <- array(,dim = c(5,2,iters,27,3))
time <- array(,dim = c(6,iters,27,3))
est <- array(,dim = c(5,iters,27,3))
treat_pos <- c(-1,-0.8,-0.5,-0.2,0,0.2,0.5,0.8,1)
outcomes <- c("low", 'med', 'high')
size <- c(200,1000,5000)
treat <- c(-1,0,1)
conf <- c(0.1,0.5,0.9)
scenarios <- as.data.frame(tidyr::crossing(size,conf, treat))
bias_point <- array(,dim = c(5,27,3))
sd_point <- array(,dim = c(5,27,3))
mean_time <- data.frame(matrix(,nrow = 0, ncol = 10))
true_value_red <- -true_value_red
na_failure_rate <- data.frame(matrix(,nrow = 0, ncol = 7))
for (i in 1:27){
for (j in 1:3){
load(paste0("HPC output/NewSimus/J_CI_bootstrap_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_jackknife_mvn_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_jackknife_wald_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_LEF_outcome_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_LEF_both_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_CI_sandwich_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("HPC output/NewSimus/J_computation_time_",outcomes[j],'_', i, ".rda"))
load(paste0('HPC output/NewSimus/J_estimates_red_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimus/coeff_dim_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimus/bootstrap_nas_',outcomes[j],'_',i, '.rda'))
load(paste0('HPC output/NewSimus/jackknife_nas_',outcomes[j],'_',i, '.rda'))
bootstrap[,,,i,j] <- CI_bootstrap_PP_red
LEF_outcome[,,,i,j] <- CI_LEF_outcome_PP_red
LEF_both[,,,i,j] <- CI_LEF_both_PP_red
sandwich[,,,i,j] <- CI_sandwich_PP_red
jackknife_mvn[,,,i,j] <- CI_jackknife_mvn_PP_red
jackknife_wald[,,,i,j] <- CI_jackknife_wald_PP_red
na_failure_rate <- rbind(na_failure_rate, c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3],
mean(coeff_dim, na.rm = TRUE),
mean(bootstrap_nas, na.rm = TRUE),
mean(jackknife_nas, na.rm = TRUE)
))
mean_time <- rbind(mean_time, c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3], rowMeans(computation_time, na.rm = TRUE)))
scenario <- i%%9
est[,,i,j] <- estimates
if (scenario ==0){scenario <- 9}
bias_point[,i,j] <- rowMeans(estimates, na.rm = TRUE) - true_value_red[,scenario,j]
sd_point[,i,j] <- rowSds(estimates, na.rm = TRUE)
}
}
j
120/24
100+500+15+60+100+30
650+300+440
805 + 158.84
citation()
gc()
gc()
#!/usr/bin R
library(modelr)
library(tidyverse)
library(tidyr)
setwd("~/rds/hpc-work/Project1")
source("weight_func.R")
set.seed(NULL)
library(TrialEmulation)
library(MASS)
library(sandwich)
setwd("Code")
source("simulate_MSM_simplified.R")
source("weight_func.R")
set.seed(NULL)
library(TrialEmulation)
library(MASS)
library(sandwich)
library(doParallel)
library(doRNG)
simdata_censored<-DATA_GEN_censored_reduced(200, 5,
conf = 0.1,
treat_prev = -1,
outcome_prev = -4.7,
censor = F)
PP_prep <- TrialEmulation::data_preparation(simdata_censored, id='ID', period='t', treatment='A', outcome='Y',
eligible ='eligible',
switch_d_cov = ~X2 + X4,
outcome_cov = ~X2 + X4, model_var = c('assigned_treatment'),
use_weight=T, use_censor=T, quiet = T,
save_weight_models = T,
data_dir = data_direction)
PP_prep <- TrialEmulation::data_preparation(simdata_censored, id='ID', period='t', treatment='A', outcome='Y',
eligible ='eligible',
switch_d_cov = ~X2 + X4,
outcome_cov = ~X2 + X4, model_var = c('assigned_treatment'),
use_weight=T, use_censor=T, quiet = T,
save_weight_models = T,
data_dir = getwd())
event_summary <- PP_prep$data %>%
dplyr::group_by(followup_time, assigned_treatment) %>%
dplyr::summarise(sum_y = sum(Y))
event_summary <- PP_prep$data %>%
dplyr::group_by(followup_time, assigned_treatment) %>%
dplyr::summarise(sum_y = sum(outcome))
View(event_summary)
event_summary <- PP_prep$data %>%
dplyr::filter(trial_period == 0)
event_summary <- PP_prep$data %>%
dplyr::filter(trial_period == 0) %>%
dplyr::group_by(followup_time, assigned_treatment) %>%
dplyr::summarise(sum_y = sum(outcome))
event_summary <- PP_prep$data %>%
dplyr::group_by(trial_period,followup_time, assigned_treatment) %>%
dplyr::summarise(sum_y = sum(outcome))
event_summary <- simdata_censored %>%
dplyr::group_by(t, A) %>%
dplyr::summarise(sum_y = sum(Y))
event_summary <- PP_prep$data %>%
dplyr::group_by(followup_time, assigned_treatment) %>%
dplyr::summarise(sum_y = sum(outcome))
