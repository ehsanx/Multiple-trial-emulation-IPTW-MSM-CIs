dplyr::group_by(followup_time) %>%
dplyr::summarise(survival_treatment = mean(cum_hazard_treatment),
survival_control = mean(cum_hazard_control),
survival_difference = survival_treatment - survival_control,
survival_ratio = survival_treatment/survival_control)
write.csv(predicted_probas_ITT, "predicted_probas_ITT.csv")
save(ITT,file = "ITT_fit.rda")
write.csv(fitting_data_treatment, "fitting_data_treatment.csv")
write.csv(fitting_data_control, "fitting_data_control.csv")
data_path = "MSM_censor.csv"
##### excluding obs before first becoming eligible, with censoring by dropout #######################################
#### PP analysis
PP <- RandomisedTrialsEmulation::initiators(data_path, id='ID', period='t', treatment='A', outcome='Y', eligible ='eligible', cense = 'C',
model_switchd =c( 'X1', 'X2', 'X3', 'X4', 'age_s'),
cov_switchd = c( 'X1', 'X2', 'X3', 'X4', 'age_s'),
outcomeCov_var=c( 'X3', 'X4', 'age_s'), outcomeCov =c('X3', 'X4', 'age_s'), model_var = c('assigned_treatment'),
cov_censed = c( 'X1', 'X2','X3', 'X4', 'age_s'), model_censed =c( 'X1', 'X2','X3', 'X4', 'age_s'), pool_cense=1,
include_expansion_time_case = 0, include_followup_time_case = c("linear", "quadratic"), include_regime_length = 1,
use_weight=1, use_censor=1, case_control = 0, data_dir =getwd(), numCores = 1, quiet = FALSE)
#### Survival function point estimate for PP ####
fitting_data_treatment <- read.csv("fitting_data_treatment.csv")
fitting_data_control <- read.csv("fitting_data_control.csv")
Y_pred_PP_treatment <- predict.glm(PP$model$model, fitting_data_treatment,
type = "response")
Y_pred_PP_control <- predict.glm(PP$model$model, fitting_data_control,
type = "response")
predicted_probas_PP <- fitting_data_treatment %>%
dplyr::mutate(predicted_proba_treatment = Y_pred_PP_treatment,
predicted_proba_control = Y_pred_PP_control) %>%
dplyr::group_by(id, for_period) %>%
dplyr::mutate(cum_hazard_treatment = cumprod(1-predicted_proba_treatment),
cum_hazard_control = cumprod(1-predicted_proba_control)) %>%
dplyr::ungroup() %>%
dplyr::group_by(followup_time) %>%
dplyr::summarise(survival_treatment = mean(cum_hazard_treatment),
survival_control = mean(cum_hazard_control),
survival_difference = survival_treatment - survival_control,
survival_ratio = survival_treatment/survival_control)
write.csv(predicted_probas_PP, "predicted_probas_PP.csv")
save(PP,file = "PP_fit.rda")
## simulate data for testing TrialEmulation package, using the algorithm in Young and Tchetgen Tchetgen (2014)
library(modelr)
library(reshape2)
library(tidyverse)
library(tidyr)
setwd("/Users/juliette/Documents/MPhil PHS 21-22/MPhil-dissertation/Code")
source("simulate_MSM.R")
set.seed(20222022)
library(MASS)
library(RandomisedTrialsEmulation)
library(matrixStats)
library(Metrics)
library(sandwich)
#RUN BOOTSTRAP FILES TO WORK ON SAME SIMULATED DATA AND MODEL FIT
load("PP_fit.rda")
predicted_probas_PP <- read.csv("predicted_probas_PP.csv")
fitting_data_treatment <- read.csv("fitting_data_treatment.csv")
fitting_data_control <- read.csv("fitting_data_control.csv")
#Calculate robust SE's covariance matrix
covariance_mat <- PP$model$robust$matrix
#Step 1 of algorithm  -- sampling Y_n1, ..., Y_nB ~ MN(coeffs,sandwich covariance)
sampling_size <- 200
coeffs_sample <- mvrnorm(sampling_size,PP$model$model$coefficients, covariance_mat)
surv_PP_treatment_sandwich_estimates <- as.data.frame(matrix(,10,sampling_size))
surv_PP_control_sandwich_estimates <- as.data.frame(matrix(,10,sampling_size))
surv_PP_difference_sandwich_estimates <- as.data.frame(matrix(,10,sampling_size))
surv_PP_ratio_sandwich_estimates <- as.data.frame(matrix(,10,sampling_size))
for (i in 1:sampling_size){
#Step 1 of algorithm -- same model with new coeffs = one point from MVN sample
fit_sample <- PP
fit_sample$model$model$coefficients <- coeffs_sample[i,]
#Step 2 -- calculating survival probas with new model
Y_pred_sample_treatment <- predict.glm(fit_sample$model$model,
fitting_data_treatment,
type = "response")
Y_pred_sample_control <- predict.glm(fit_sample$model$model,
fitting_data_control,
type = "response")
predicted_probas_PP_sample <- fitting_data_treatment %>%
dplyr::mutate(predicted_proba_treatment = Y_pred_sample_treatment,
predicted_proba_control = Y_pred_sample_control) %>%
dplyr::group_by(id, for_period) %>%
dplyr::mutate(cum_hazard_treatment = cumprod(1-predicted_proba_treatment),
cum_hazard_control = cumprod(1-predicted_proba_control)) %>%
dplyr::ungroup() %>%
dplyr::group_by(followup_time) %>%
dplyr::summarise(survival_treatment = mean(cum_hazard_treatment),
survival_control = mean(cum_hazard_control))
surv_PP_treatment_sandwich_estimates[,i] <- predicted_probas_PP_sample[,2]
surv_PP_control_sandwich_estimates[,i] <- predicted_probas_PP_sample[,3]
surv_PP_difference_sandwich_estimates[,i] <- predicted_probas_PP_sample[,2] - predicted_probas_PP_sample[,3]
surv_PP_ratio_sandwich_estimates[,i] <- predicted_probas_PP_sample[,2]/predicted_probas_PP_sample[,3]
}
#Step 3 -- calculating lower and upper bounds by 2.5% and 97.5% quantiles
surv_PP_treatment_sandwich_estimates$lb <-apply(surv_PP_treatment_sandwich_estimates,
1,
quantile,
probs = c(0.025))
surv_PP_treatment_sandwich_estimates$ub <- apply(surv_PP_treatment_sandwich_estimates,
1,
quantile,
probs = c(0.975))
surv_PP_control_sandwich_estimates$lb <-apply(surv_PP_control_sandwich_estimates,
1,
quantile,
probs = c(0.025))
surv_PP_control_sandwich_estimates$ub <- apply(surv_PP_control_sandwich_estimates,
1,
quantile,
probs = c(0.975))
surv_PP_difference_sandwich_estimates$lb <- apply(surv_PP_difference_sandwich_estimates,
1,
quantile,
probs = c(0.025))
surv_PP_difference_sandwich_estimates$ub <- apply(surv_PP_difference_sandwich_estimates,
1,
quantile,
probs = c(0.975))
surv_PP_ratio_sandwich_estimates$lb <- apply(surv_PP_ratio_sandwich_estimates,
1,
quantile,
probs = c(0.025))
surv_PP_ratio_sandwich_estimates$ub <- apply(surv_PP_ratio_sandwich_estimates,
1,
quantile,
probs = c(0.975))
#Update dataframe with results
predicted_probas_PP <- predicted_probas_PP %>%
dplyr::mutate(survival_treatment_lb_sandwich = surv_PP_treatment_sandwich_estimates$lb,
survival_treatment_ub_sandwich = surv_PP_treatment_sandwich_estimates$ub,
survival_control_lb_sandwich = surv_PP_control_sandwich_estimates$lb,
survival_control_ub_sandwich = surv_PP_control_sandwich_estimates$ub,
survival_difference_lb_sandwich = surv_PP_difference_sandwich_estimates$lb,
survival_difference_ub_sandwich = surv_PP_difference_sandwich_estimates$ub,
survival_ratio_lb_sandwich = surv_PP_ratio_sandwich_estimates$lb,
survival_ratio_ub_sandwich = surv_PP_ratio_sandwich_estimates$ub)
##### Plot survival curves #####
library(ggplot2)
library(pammtools)
ggplot(data = predicted_probas_PP, aes(followup_time)) +
geom_step(aes(y = survival_treatment, color = "Treatment")) +
geom_stepribbon(aes(ymin = survival_treatment_lb, ymax = survival_treatment_ub), alpha = 0.1) +
geom_step(aes(y = survival_control, color = "Control")) +
geom_stepribbon(aes(ymin = survival_control_lb, ymax = survival_control_ub), alpha = 0.3) +
scale_color_manual(name = "Treatment assignment", values = c("Treatment"= "red", "Control" = "blue")) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment",
title = "PP analysis - bootstrap CIs")
ggplot(data = predicted_probas_PP, aes(followup_time)) +
geom_step(aes(y = survival_treatment, color = "Treatment")) +
geom_stepribbon(aes(ymin = survival_treatment_lb_sandwich, ymax = survival_treatment_ub_sandwich), alpha = 0.1) +
geom_step(aes(y = survival_control, color = "Control")) +
geom_stepribbon(aes(ymin = survival_control_lb_sandwich, ymax = survival_control_ub_sandwich), alpha = 0.3) +
scale_color_manual(name = "Treatment assignment", values = c("Treatment"= "red", "Control" = "blue")) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment",
title = "PP analysis - sandwich CIs")
ggplot(data = predicted_probas_PP, aes(followup_time)) +
geom_step(aes(y = survival_ratio)) +
geom_stepribbon(aes(ymin = survival_ratio_lb_sandwich,
ymax = survival_ratio_ub_sandwich), alpha = 0.1) +
labs(x = 'Follow-up time',
y = "Ratio of survival functions for each treatment type", title = "PP analysis - sandwich CIs")
ggplot(data = predicted_probas_PP, aes(followup_time)) +
geom_step(aes(y = survival_difference)) +
geom_stepribbon(aes(ymin = survival_difference_lb_sandwich,
ymax = survival_difference_ub_sandwich), alpha = 0.1) +
labs(x = 'Follow-up time',
y = "Difference between treatment and control survival functions", title = "PP analysis- sandwich CIs")
sampling_size <- 500
coeffs_sample <- mvrnorm(sampling_size,PP$model$model$coefficients, covariance_mat)
surv_PP_treatment_sandwich_estimates <- as.data.frame(matrix(,10,sampling_size))
surv_PP_control_sandwich_estimates <- as.data.frame(matrix(,10,sampling_size))
surv_PP_difference_sandwich_estimates <- as.data.frame(matrix(,10,sampling_size))
surv_PP_ratio_sandwich_estimates <- as.data.frame(matrix(,10,sampling_size))
for (i in 1:sampling_size){
#Step 1 of algorithm -- same model with new coeffs = one point from MVN sample
fit_sample <- PP
fit_sample$model$model$coefficients <- coeffs_sample[i,]
#Step 2 -- calculating survival probas with new model
Y_pred_sample_treatment <- predict.glm(fit_sample$model$model,
fitting_data_treatment,
type = "response")
Y_pred_sample_control <- predict.glm(fit_sample$model$model,
fitting_data_control,
type = "response")
predicted_probas_PP_sample <- fitting_data_treatment %>%
dplyr::mutate(predicted_proba_treatment = Y_pred_sample_treatment,
predicted_proba_control = Y_pred_sample_control) %>%
dplyr::group_by(id, for_period) %>%
dplyr::mutate(cum_hazard_treatment = cumprod(1-predicted_proba_treatment),
cum_hazard_control = cumprod(1-predicted_proba_control)) %>%
dplyr::ungroup() %>%
dplyr::group_by(followup_time) %>%
dplyr::summarise(survival_treatment = mean(cum_hazard_treatment),
survival_control = mean(cum_hazard_control))
surv_PP_treatment_sandwich_estimates[,i] <- predicted_probas_PP_sample[,2]
surv_PP_control_sandwich_estimates[,i] <- predicted_probas_PP_sample[,3]
surv_PP_difference_sandwich_estimates[,i] <- predicted_probas_PP_sample[,2] - predicted_probas_PP_sample[,3]
surv_PP_ratio_sandwich_estimates[,i] <- predicted_probas_PP_sample[,2]/predicted_probas_PP_sample[,3]
}
#Step 3 -- calculating lower and upper bounds by 2.5% and 97.5% quantiles
surv_PP_treatment_sandwich_estimates$lb <-apply(surv_PP_treatment_sandwich_estimates,
1,
quantile,
probs = c(0.025))
surv_PP_treatment_sandwich_estimates$ub <- apply(surv_PP_treatment_sandwich_estimates,
1,
quantile,
probs = c(0.975))
surv_PP_control_sandwich_estimates$lb <-apply(surv_PP_control_sandwich_estimates,
1,
quantile,
probs = c(0.025))
surv_PP_control_sandwich_estimates$ub <- apply(surv_PP_control_sandwich_estimates,
1,
quantile,
probs = c(0.975))
surv_PP_difference_sandwich_estimates$lb <- apply(surv_PP_difference_sandwich_estimates,
1,
quantile,
probs = c(0.025))
surv_PP_difference_sandwich_estimates$ub <- apply(surv_PP_difference_sandwich_estimates,
1,
quantile,
probs = c(0.975))
surv_PP_ratio_sandwich_estimates$lb <- apply(surv_PP_ratio_sandwich_estimates,
1,
quantile,
probs = c(0.025))
surv_PP_ratio_sandwich_estimates$ub <- apply(surv_PP_ratio_sandwich_estimates,
1,
quantile,
probs = c(0.975))
#Update dataframe with results
predicted_probas_PP <- predicted_probas_PP %>%
dplyr::mutate(survival_treatment_lb_sandwich = surv_PP_treatment_sandwich_estimates$lb,
survival_treatment_ub_sandwich = surv_PP_treatment_sandwich_estimates$ub,
survival_control_lb_sandwich = surv_PP_control_sandwich_estimates$lb,
survival_control_ub_sandwich = surv_PP_control_sandwich_estimates$ub,
survival_difference_lb_sandwich = surv_PP_difference_sandwich_estimates$lb,
survival_difference_ub_sandwich = surv_PP_difference_sandwich_estimates$ub,
survival_ratio_lb_sandwich = surv_PP_ratio_sandwich_estimates$lb,
survival_ratio_ub_sandwich = surv_PP_ratio_sandwich_estimates$ub)
##### Plot survival curves #####
library(ggplot2)
library(pammtools)
ggplot(data = predicted_probas_PP, aes(followup_time)) +
geom_step(aes(y = survival_treatment, color = "Treatment")) +
geom_stepribbon(aes(ymin = survival_treatment_lb, ymax = survival_treatment_ub), alpha = 0.1) +
geom_step(aes(y = survival_control, color = "Control")) +
geom_stepribbon(aes(ymin = survival_control_lb, ymax = survival_control_ub), alpha = 0.3) +
scale_color_manual(name = "Treatment assignment", values = c("Treatment"= "red", "Control" = "blue")) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment",
title = "PP analysis - bootstrap CIs")
ggplot(data = predicted_probas_PP, aes(followup_time)) +
geom_step(aes(y = survival_treatment, color = "Treatment")) +
geom_stepribbon(aes(ymin = survival_treatment_lb_sandwich, ymax = survival_treatment_ub_sandwich), alpha = 0.1) +
geom_step(aes(y = survival_control, color = "Control")) +
geom_stepribbon(aes(ymin = survival_control_lb_sandwich, ymax = survival_control_ub_sandwich), alpha = 0.3) +
scale_color_manual(name = "Treatment assignment", values = c("Treatment"= "red", "Control" = "blue")) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment",
title = "PP analysis - sandwich CIs")
ggplot(data = predicted_probas_PP, aes(followup_time)) +
geom_step(aes(y = survival_ratio)) +
geom_stepribbon(aes(ymin = survival_ratio_lb_sandwich,
ymax = survival_ratio_ub_sandwich), alpha = 0.1) +
labs(x = 'Follow-up time',
y = "Ratio of survival functions for each treatment type", title = "PP analysis - sandwich CIs")
ggplot(data = predicted_probas_PP, aes(followup_time)) +
geom_step(aes(y = survival_difference)) +
geom_stepribbon(aes(ymin = survival_difference_lb_sandwich,
ymax = survival_difference_ub_sandwich), alpha = 0.1) +
labs(x = 'Follow-up time',
y = "Difference between treatment and control survival functions", title = "PP analysis- sandwich CIs")
ggplot(data = predicted_probas_PP, aes(followup_time)) +
geom_step(aes(y = survival_difference)) +
geom_stepribbon(aes(ymin = survival_difference_lb_sandwich,
ymax = survival_difference_ub_sandwich), alpha = 0.1) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,1], ymax = CI_sandwich_coefs_PP[,2,1]), alpha = 0.3) +
labs(x = 'Follow-up time',
y = "Difference between treatment and control survival functions", title = "PP analysis- sandwich CIs")
ggplot(data = predicted_probas_PP, aes(followup_time)) +
geom_step(aes(y = survival_difference)) +
geom_stepribbon(aes(ymin = survival_difference_lb_sandwich,
ymax = survival_difference_ub_sandwich), alpha = 0.1, colour = 'red') +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,1], ymax = CI_bootstrap_coefs_PP[,2,1]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,1], ymax = CI_sandwich_coefs_PP[,2,1]), alpha = 0.1) +
labs(x = 'Follow-up time',
y = "Difference between treatment and control survival functions", title = "PP analysis- sandwich CIs")
ggplot(data = predicted_probas_PP, aes(followup_time)) +
geom_step(aes(y = survival_difference)) +
geom_stepribbon(aes(ymin = survival_difference_lb_sandwich,
ymax = survival_difference_ub_sandwich), alpha = 0.1, colour = 'red') +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,1], ymax = CI_bootstrap_coefs_PP[,2,1]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,1], ymax = CI_sandwich_coefs_PP[,2,1]), alpha = 0.1, colour = 'blue') +
labs(x = 'Follow-up time',
y = "Difference between treatment and control survival functions", title = "PP analysis- sandwich CIs")
load("HPC output/CI_bootstrap_coefs_PP_1.rda")
load("HPC output/CI_sandwich_coefs_PP_1.rda")
ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,1], ymax = CI_bootstrap_coefs_PP[,2,1]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,1], ymax = CI_sandwich_coefs_PP[,2,1]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = "PP Analysis")
ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,1]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,1]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = "PP Analysis")
iter <- 2
ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,iter] - true_value_conf[,2,iter])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = "PP Analysis")
iter <- 3
iter <- 2
ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = "PP Analysis")
iter <- 1
ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = "PP Analysis")
iter <- 2
ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = "PP Analysis")
iter <- 3
ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = "PP Analysis")
iter <- 4
ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = "PP Analysis")
iter <- 5
ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = "PP Analysis")
iter <- 6
ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = "PP Analysis")
iter <- 7
ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = "PP Analysis")
iter <- 8
ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = "PP Analysis")
iter <- 9
ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = "PP Analysis")
iter <- 10
ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = "PP Analysis")
CI_bootstrap_coefs_PP[,,iter]
iter <- 11
ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = "PP Analysis")
iter <- 12
ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = "PP Analysis")
for (iter in 1:12){}
for (iter in 1:12){
ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = paste0("PP Analysis ",iter))
}
for (iter in 1:12){
ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = paste0("PP Analysis ",iter))
}
for (iter in 1:12){
ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = paste0("PP Analysis ",iter))
}
ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = paste0("PP Analysis ",iter))
for (iter in 1:12){
print(ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = paste0("PP Analysis ",iter)))
}
is.positive.definite(PP$model$robust$matrix)
library(matrixcalc)
is.positive.definite(PP$model$robust$matrix)
PP$model$robust$matrix
eigen(PP$model$robust$matrix)$values
eigen(PP$model$robust$matrix)$values > 0
all(eigen(PP$model$robust$matrix)$values > 0)
load("true_value_conf.rda")
load("HPC output/CI_bootstrap_coefs_PP_1.rda")
load("HPC output/CI_sandwich_coefs_PP_1.rda")
for (iter in 1:2){
print(ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = paste0("PP Analysis ",iter)))
}
CI_sandwich_coefs_PP[,,2]
load("HPC output/CI_bootstrap_coefs_PP_1.rda")
load("HPC output/CI_sandwich_coefs_PP_1.rda")
for (iter in 1:2){
print(ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = paste0("PP Analysis ",iter)))
}
load("HPC output/CI_bootstrap_coefs_PP_1.rda")
load("HPC output/CI_sandwich_coefs_PP_1.rda")
for (iter in 1:2){
print(ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = paste0("PP Analysis ",iter)))
}
load("HPC output/CI_bootstrap_coefs_PP_2.rda")
load("HPC output/CI_sandwich_coefs_PP_2.rda")
for (iter in 1:2){
print(ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = paste0("PP Analysis ",iter)))
}
load("HPC output/CI_bootstrap_coefs_PP_2.rda")
load("HPC output/CI_sandwich_coefs_PP_2.rda")
load("HPC output/CI_bootstrap_coefs_PP_1.rda")
load("HPC output/CI_bootstrap_coefs_PP_2.rda")
print(ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,2] - true_value_conf[,2,2])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = paste0("PP Analysis ",iter)))
load("HPC output/CI_bootstrap_coefs_PP_2.rda")
load("HPC output/CI_sandwich_coefs_PP_2.rda")
for (iter in 1:2){
print(ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,2] - true_value_conf[,2,2])) +
geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = paste0("PP Analysis ",iter)))
}
print(ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,2] - true_value_conf[,2,2])) +
#geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
#geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = paste0("PP Analysis ",iter)))
print(ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_conf[,1,1] - true_value_conf[,2,1])) +
#geom_stepribbon(aes(ymin = CI_bootstrap_coefs_PP[,1,iter], ymax = CI_bootstrap_coefs_PP[,2,iter]), alpha = 0.3) +
#geom_stepribbon(aes(ymin = CI_sandwich_coefs_PP[,1,iter], ymax = CI_sandwich_coefs_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = paste0("PP Analysis ",iter)))
load("true_value_treat.rda")
load("HPC output/CI_bootstrap_treat_PP_1.rda")
load("HPC output/CI_sandwich_treat_PP_1.rda")
for (iter in 1:20){
print(ggplot(,aes(x = 1:10)) +
geom_step(aes(y = true_value_treat[,1,1] - true_value_treat[,2,1])) +
geom_stepribbon(aes(ymin = CI_bootstrap_treat_PP[,1,iter], ymax = CI_bootstrap_treat_PP[,2,iter]), alpha = 0.3) +
geom_stepribbon(aes(ymin = CI_sandwich_treat_PP[,1,iter], ymax = CI_sandwich_treat_PP[,2,iter]), alpha = 0.1) +
labs(x = 'Follow-up time', y = "Survival function", color = "Assigned treatment", title = paste0("PP Analysis ",iter)))
}
10^3
