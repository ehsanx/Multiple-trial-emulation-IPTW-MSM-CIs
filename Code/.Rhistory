##Generate outcome
##### Old formula: intercept was -7
lp<- -5 -1.2*A[seqlist[[k]]]+as.numeric(conf)*X2[seqlist[[k]]]+X4[seqlist[[k]]]
Yp[seqlist[[k]]]<-Y[seqlist[[k-1]]]
Y[seqlist[[k]]]<-(rbinom(ns,1,1/(1+exp(-lp))))*as.numeric(Yp[seqlist[[k]]]==0)+as.numeric(Yp[seqlist[[k]]]==1)
}
##Make data frame
ID<-rep(1:ns,each=nv)
##Align data by removing values
NSEQ<-seq1
X2<-X2[-NSEQ]
X4<-X4[-NSEQ]
A<-A[-NSEQ]
Ap<-Ap[-NSEQ]
CAp<-CAp[-NSEQ]
Y<-Y[-seq(1,nvisit*ns-nv,nvisit)]
Yp<-Yp[-seq(1,nvisit*ns-nv,nvisit)]
##Create data frame
DATA<-data.frame(ID,t=rep(c(0:(nv-1)),ns),A,Ap,CAp,X2,X4,Y,Yp)
DATA$eligible<-as.numeric(CAp==0 & Yp==0)  ## eligibility criteria: age>=18, had no treatment so far, no event so far
##censoring
if (censor == T){
Dprob<-1/(1+exp(1+Ap+0.5*X2+0.2*X4)) ##Probability of dropout
DATA$C<-rbinom(nv*ns,1,Dprob) ##C=0 is remain in the study
indfun<-function(n){
if (sum(n)==0) {rep(0,nv)}
else{k<-min(which(n==1))
c(rep(0,k),rep(1,nv-k))}}
RL<-ave(DATA$C,DATA$ID,FUN=indfun)
eligCum<-ave(DATA$eligible,DATA$ID,FUN=cumsum)
DATA[RL==0 & DATA$Yp==0 & eligCum>0,] #remove observations after event occurrence and censoring, and not eligible
} else {
eligCum<-ave(DATA$eligible,DATA$ID,FUN=cumsum)
DATA[DATA$Yp==0 & eligCum>0,]
}
}
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
count_treated <- simdata_censored %>%
select(ID, A) %>%
group_by(ID) %>%
summarise(treated = max(A)) %>%
ungroup() %>%
mutate(count_treated = sum(treated))
sum(simdata_censored$Y)
source("~/Documents/MPhil PHS 21-22/MPhil-dissertation/Code/simulate_MSM_simplified.R", echo=TRUE)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
count_treated <- simdata_censored %>%
select(ID, A) %>%
group_by(ID) %>%
summarise(treated = max(A)) %>%
ungroup() %>%
mutate(count_treated = sum(treated))
source("~/Documents/MPhil PHS 21-22/MPhil-dissertation/Code/simulate_MSM_simplified.R", echo=TRUE)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
count_treated <- simdata_censored %>%
select(ID, A) %>%
group_by(ID) %>%
summarise(treated = max(A)) %>%
ungroup() %>%
mutate(count_treated = sum(treated))
sum(simdata_censored$Y)
source("~/Documents/MPhil PHS 21-22/MPhil-dissertation/Code/simulate_MSM_simplified.R", echo=TRUE)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
count_treated <- simdata_censored %>%
select(ID, A) %>%
group_by(ID) %>%
summarise(treated = max(A)) %>%
ungroup() %>%
mutate(count_treated = sum(treated))
sum(simdata_censored$Y)
source("~/Documents/MPhil PHS 21-22/MPhil-dissertation/Code/simulate_MSM_simplified.R", echo=TRUE)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
count_treated <- simdata_censored %>%
select(ID, A) %>%
group_by(ID) %>%
summarise(treated = max(A)) %>%
ungroup() %>%
mutate(count_treated = sum(treated))
sum(simdata_censored$Y)
source("~/Documents/MPhil PHS 21-22/MPhil-dissertation/Code/simulate_MSM_simplified.R", echo=TRUE)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
count_treated <- simdata_censored %>%
select(ID, A) %>%
group_by(ID) %>%
summarise(treated = max(A)) %>%
ungroup() %>%
mutate(count_treated = sum(treated))
sum(simdata_censored$Y)
simdata_censored <- DATA_GEN_censored_reduced(1000,5,treat_prev = 0.5)
count_treated <- simdata_censored %>%
select(ID, A) %>%
group_by(ID) %>%
summarise(treated = max(A)) %>%
ungroup() %>%
mutate(count_treated = sum(treated))
simdata_censored <- DATA_GEN_censored_reduced(1000,5,treat_prev = 0.9)
count_treated <- simdata_censored %>%
select(ID, A) %>%
group_by(ID) %>%
summarise(treated = max(A)) %>%
ungroup() %>%
mutate(count_treated = sum(treated))
source("~/Documents/MPhil PHS 21-22/MPhil-dissertation/Code/simulate_MSM_simplified.R", echo=TRUE)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
count_treated <- simdata_censored %>%
select(ID, A) %>%
group_by(ID) %>%
summarise(treated = max(A)) %>%
ungroup() %>%
mutate(count_treated = sum(treated))
sum(simdata_censored$Y)
source("~/Documents/MPhil PHS 21-22/MPhil-dissertation/Code/simulate_MSM_simplified.R", echo=TRUE)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
sum(simdata_censored$Y)
source("~/Documents/MPhil PHS 21-22/MPhil-dissertation/Code/simulate_MSM_simplified.R", echo=TRUE)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
sum(simdata_censored$Y)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
sum(simdata_censored$Y)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
sum(simdata_censored$Y)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
sum(simdata_censored$Y)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
sum(simdata_censored$Y)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
sum(simdata_censored$Y)
## simulate data for testing TrialEmulation package, using the algorithm in Young and Tchetgen Tchetgen (2014)
DATA_GEN_censored_reduced<-function(ns, nv, conf = 0.5, treat_prev = 0, all_treat = FALSE, all_control = FALSE, censor = TRUE){   # ns= number of subjects, nv=no of visits including baseline visit
nvisit<-nv+1
X2<-rep(0,nvisit*ns)          ## place holders for time-varying covariates
Z2<-rnorm(nvisit*ns,0,1)
X4<-rep(rnorm(ns,0,1),each=nvisit) # baseline continuous covariate
A<-rep(0,nvisit*ns) ##place holders for current  treatments
Ap<-rep(0,nvisit*ns) ##place holders for  previous treatments
CAp<-rep(0,nvisit*ns)   ##place holders for sum of previous treatment A
Y<-rep(0,nvisit*ns)     ##place holders for outcome vector
Yp<-rep(0,nvisit*ns)    ##place holders for previous outcome vector
##Fill in initial values
seq1<-seq(1,nvisit*ns-nv,nvisit)
X2[seq1]<-0
P0<-list() ##list of treatment probabilities
P0[[1]]<-rep(0, ns)
seqlist<-list()
seqlist[[1]]<-seq1
CAp[seq1]<-rep(0, ns)
for (k in 2:nvisit){
## update covariates
seqlist[[k]]<-seqlist[[k-1]]+1
Ap[seqlist[[k]]]<-A[seqlist[[k-1]]]
CAp[seqlist[[k]]]<-CAp[seqlist[[k-1]]]+Ap[seqlist[[k]]]
X2[seqlist[[k]]]<-Z2[seqlist[[k]]]-0.3*Ap[seqlist[[k]]] ## continuous time-varying confounder
## update treatment
########### Old formula: lpp<- as.numeric(treat_prev) + Ap[seqlist[[k]]]+0.5*X1[seqlist[[k]]]+as.numeric(conf)*X2[seqlist[[k]]]
###########                    -0.2*X3[seqlist[[k]]]+X4[seqlist[[k]]]-0.3*(age[seqlist[[k]]]-35)/12
lpp<- as.numeric(treat_prev) + Ap[seqlist[[k]]] +3*as.numeric(conf)*X2[seqlist[[k]]]-12*X4[seqlist[[k]]]
P0[[k]]<-1/(1+exp(-lpp))
if (all_treat == TRUE){
A[seqlist[[k]]]<- 1.0
} else{ if (all_control == TRUE){
A[seqlist[[k]]]<- 0.0
} else{
A[seqlist[[k]]]<-rbinom(ns,1,P0[[k]]) ##Generate treatment at current visit based on  covariates, previous treatment
}
}
##Generate outcome
##### Old formula: intercept was -7
lp<- -3.5 -0.5*A[seqlist[[k]]]+as.numeric(conf)*X2[seqlist[[k]]]+X4[seqlist[[k]]]
Yp[seqlist[[k]]]<-Y[seqlist[[k-1]]]
Y[seqlist[[k]]]<-(rbinom(ns,1,1/(1+exp(-lp))))*as.numeric(Yp[seqlist[[k]]]==0)+as.numeric(Yp[seqlist[[k]]]==1)
}
##Make data frame
ID<-rep(1:ns,each=nv)
##Align data by removing values
NSEQ<-seq1
X2<-X2[-NSEQ]
X4<-X4[-NSEQ]
A<-A[-NSEQ]
Ap<-Ap[-NSEQ]
CAp<-CAp[-NSEQ]
Y<-Y[-seq(1,nvisit*ns-nv,nvisit)]
Yp<-Yp[-seq(1,nvisit*ns-nv,nvisit)]
##Create data frame
DATA<-data.frame(ID,t=rep(c(0:(nv-1)),ns),A,Ap,CAp,X2,X4,Y,Yp)
DATA$eligible<-as.numeric(CAp==0 & Yp==0)  ## eligibility criteria: age>=18, had no treatment so far, no event so far
##censoring
if (censor == T){
Dprob<-1/(1+exp(1+Ap+0.5*X2+0.2*X4)) ##Probability of dropout
DATA$C<-rbinom(nv*ns,1,Dprob) ##C=0 is remain in the study
indfun<-function(n){
if (sum(n)==0) {rep(0,nv)}
else{k<-min(which(n==1))
c(rep(0,k),rep(1,nv-k))}}
RL<-ave(DATA$C,DATA$ID,FUN=indfun)
eligCum<-ave(DATA$eligible,DATA$ID,FUN=cumsum)
DATA[RL==0 & DATA$Yp==0 & eligCum>0,] #remove observations after event occurrence and censoring, and not eligible
} else {
eligCum<-ave(DATA$eligible,DATA$ID,FUN=cumsum)
DATA[DATA$Yp==0 & eligCum>0,]
}
}
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
sum(simdata_censored$Y)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
sum(simdata_censored$Y)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
sum(simdata_censored$Y)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
sum(simdata_censored$Y)
source("~/Documents/MPhil PHS 21-22/MPhil-dissertation/Code/simulate_MSM_simplified.R", echo=TRUE)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
sum(simdata_censored$Y)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
sum(simdata_censored$Y)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
sum(simdata_censored$Y)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
sum(simdata_censored$Y)
source("~/Documents/MPhil PHS 21-22/MPhil-dissertation/Code/simulate_MSM_simplified.R", echo=TRUE)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
sum(simdata_censored$Y)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
sum(simdata_censored$Y)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
sum(simdata_censored$Y)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
sum(simdata_censored$Y)
simdata_censored <- DATA_GEN_censored_reduced(1000,5)
sum(simdata_censored$Y)
tA <- as.factor(simdata_censored$t)*simdata_censored$A
tA <- as.factor(simdata_censored$t*simdata_censored$A)
tA
tA^2
tA
as.numerci(tA)
as.numeric(tA)
tA
as.numeric(tA)
as.double(tA)
as.double(tA)-
1
as.numeric(tA) - 1 == tA
as.factor(A)*5
as.factor(tA)*5
View(simdata_censored)
## simulate data for testing TrialEmulation package, using the algorithm in Young and Tchetgen Tchetgen (2014)
library(modelr)
library(reshape2)
library(tidyverse)
library(tidyr)
setwd("/Users/juliette/Documents/MPhil PHS 21-22/MPhil-dissertation/Code")
source("simulate_MSM.R")
set.seed(20222022)
#RUN ITT FILE FIRST TO ENSURE SIMULATED DATA ARE THE SAME
library(RandomisedTrialsEmulation)
###################account for censoring##############################################
data_path = "MSM_censor.csv"
##### excluding obs before first becoming eligible, with censoring by dropout #######################################
#### PP analysis
PP_prep <- RandomisedTrialsEmulation::data_preparation(data_path, id='ID', period='t', treatment='A', outcome='Y', eligible ='eligible', cense = 'C',
model_switchd =c( 'X1', 'X2', 'X3', 'X4', 'age_s'),
cov_switchd = c( 'X1', 'X2', 'X3', 'X4', 'age_s'),
outcomeCov_var=c('X1', 'X2', 'X3', 'X4', 'age_s'), outcomeCov =c('X1', 'X2','X3', 'X4', 'age_s'), model_var = c('assigned_treatment'),
cov_censed = c( 'X1', 'X2','X3', 'X4', 'age_s'), model_censed =c( 'X1', 'X2','X3', 'X4', 'age_s'), pool_cense=1,
include_expansion_time_case = 0, include_followup_time_case = c("linear", "quadratic"), include_regime_length = 1,
use_weight=1, use_censor=1, data_dir =getwd(), numCores = 1, quiet = FALSE)
switch_data <- read.csv("switch_data.csv") %>%
dplyr::mutate(tA = followup_time*assigned_treatment,
tX1 = followup_time*X1,
tX2 = followup_time*X2,
tX3 = followup_time*X3,
tX4 = followup_time*X4,
tage_s = followup_time*age_s)
View(switch_data)
View(switch_data)
write.csv(switch_data, "switch_data.csv")
library(modelr)
library(tidyverse)
library(tidyr)
setwd("/Users/juliette/Documents/MPhil PHS 21-22/MPhil-dissertation/Code")
source("simulate_MSM_modified.R")
set.seed(20222022)
library(RandomisedTrialsEmulation)
library(MASS)
library(sandwich)
library(foreach)
library(doParallel)
library(parallel)
library(survival)
library(survminer)
library(lubridate)
library(ggplot2)
library(pammtools)
library(doRNG)
load("true_value_conf_modified.rda")
load("true_value_treat_modified.rda")
coefs <- array(, dim = c(10,1000,9))
treat <- array(, dim = c(10,1000,9))
size <- array(, dim = c(10,1000,6))
for (i in 1:9){
load(paste0("HPC output/coefs_PP_red_",i,".rda"))
load(paste0("HPC output/treat_PP_mod_",i,".rda"))
coefs[,,i] <- coefs_PP_red
treat[,,i] <- treat_PP_mod
}
sizes <- c(2,5,8,10,25,50)
for (i in 1:6){
load(paste0("HPC output/size_PP_mod_",sizes[i],".rda"))
size[,,i] <- size_PP_mod
}
bias_point_coefs <- array(,dim = c(10,9))
bias_point_treat <- array(,dim = c(10,9))
bias_point_size <- array(,dim = c(10,6))
for (i in 1:9){
bias_point_coefs[,i] <- rowMeans(coefs[,,i], na.rm = TRUE) - (true_value_conf_modified[,1,i] - true_value_conf_modified[,2,i])
bias_point_treat[,i] <- rowMeans(treat[,,i], na.rm = TRUE) - (true_value_treat_modified[,1,i] - true_value_treat_modified[,2,i])
}
for (i in 1:6){
bias_point_size[,i] <- rowMeans(size[,,i], na.rm = TRUE) - (true_value_conf_modified[,1,5] - true_value_conf_modified[,2,5])
}
p13 <- ggplot()+
geom_line(aes(x = 0:9, y = bias_point_coefs[,1], colour = "Full model")) +
geom_point(aes(x = 0:9, y = bias_point_coefs[,1], colour = "Full model")) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_manual(name = "Model type", values = c("Full model"= "green", "Simple model" = "purple")) +
labs(x = 'Follow up time',
y = "Empirical bias",
title = "Confounding = 0.1")+
ylim(-0.02,0.02)+
theme(plot.title = element_text(size=10))
p14 <- ggplot()+
geom_line(aes(x = 0:9, y = bias_point_coefs[,5], colour = "Full model")) +
geom_point(aes(x = 0:9, y = bias_point_coefs[,5], colour = "Full model")) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_manual(name = "Model type", values = c("Full model"= "green", "Simple model" = "purple")) +
labs(x = 'Follow up time',
y = "Empirical bias",
title = "Confounding = 0.5")+
ylim(-0.02,0.02)+
theme(plot.title = element_text(size=10))
p15 <- ggplot()+
geom_line(aes(x = 0:9, y = bias_point_coefs[,9], colour = "Full model")) +
geom_point(aes(x = 0:9, y = bias_point_coefs[,9], colour = "Full model")) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_manual(name = "Model type", values = c("Full model"= "green", "Simple model" = "purple")) +
labs(x = 'Follow up time',
y = "Empirical bias",
title = "Confounding = 0.9")+
ylim(-0.02,0.02)+
theme(plot.title = element_text(size=10))
figure5 <- ggarrange(p13+ rremove("ylab"),p14+ rremove("ylab"),p15+ rremove("ylab"), nrow = 1, ncol = 3, common.legend = T, legend = 'none')
figure5 <- annotate_figure(figure5,
left = text_grob("Empirical bias",size = 10, rot =  90))
p16 <- ggplot()+
geom_line(aes(x = 0:9, y = bias_point_treat[,1], colour = "Full model")) +
geom_point(aes(x = 0:9, y = bias_point_treat[,1], colour = "Full model")) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_manual(name = "Model type", values = c("Full model"= "green", "Simple model" = "purple")) +
labs(x = 'Follow up time',
y = "Empirical bias",
title = "Treatment prevalence = 0.1")+
ylim(-0.02,0.02)+
theme(plot.title = element_text(size=10))
p17 <- ggplot()+
geom_line(aes(x = 0:9, y = bias_point_treat[,5], colour = "Full model")) +
geom_point(aes(x = 0:9, y = bias_point_treat[,5], colour = "Full model")) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_manual(name = "Model type", values = c("Full model"= "green", "Simple model" = "purple")) +
labs(x = 'Follow up time',
y = "Empirical bias",
title = "Treatment prevalence = 0.5")+
ylim(-0.02,0.02)+
theme(plot.title = element_text(size=10))
p18 <- ggplot()+
geom_line(aes(x = 0:9, y = bias_point_treat[,9], colour = "Full model")) +
geom_point(aes(x = 0:9, y = bias_point_treat[,9], colour = "Full model")) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_manual(name = "Model type", values = c("Full model"= "green", "Simple model" = "purple")) +
labs(x = 'Follow up time',
y = "Empirical bias",
title = "Treatment prevalence = 0.9")+
ylim(-0.02,0.02)+
theme(plot.title = element_text(size=10))
figure6 <- ggarrange(p16+ rremove("ylab"),p17+ rremove("ylab"),p18+ rremove("ylab"), nrow = 1, ncol = 3, common.legend = T, legend = 'none')
figure6 <- annotate_figure(figure6,
left = text_grob("Empirical bias",size = 10, rot =  90))
p19 <- ggplot()+
geom_line(aes(x = 0:9, y = bias_point_size[,1], colour = "Full model")) +
geom_point(aes(x = 0:9, y = bias_point_size[,1], colour = "Full model")) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_manual(name = "Model type", values = c("Full model"= "green", "Simple model" = "purple")) +
labs(x = 'Follow up time',
y = "Empirical bias",
title = "Sample size = 200")+
ylim(-0.02,0.02)+
theme(plot.title = element_text(size=10))
p20 <- ggplot()+
geom_line(aes(x = 0:9, y = bias_point_size[,4], colour = "Full model")) +
geom_point(aes(x = 0:9, y = bias_point_size[,4], colour = "Full model")) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_manual(name = "Model type", values = c("Full model"= "green", "Simple model" = "purple")) +
labs(x = 'Follow up time',
y = "Empirical bias",
title = "Sample size = 1000")+
ylim(-0.02,0.02)+
theme(plot.title = element_text(size=10))
p21 <- ggplot()+
geom_line(aes(x = 0:9, y = bias_point_size[,6], colour = "Full model")) +
geom_point(aes(x = 0:9, y = bias_point_size[,6], colour = "Full model")) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_manual(name = "Model type", values = c("Full model"= "green", "Simple model" = "purple")) +
labs(x = 'Follow up time',
y = "Empirical bias",
title = "Sample size = 5000")+
ylim(-0.02,0.02)+
theme(plot.title = element_text(size=10))
figure7 <- ggarrange(p19+ rremove("ylab"),p20+ rremove("ylab"),p21+ rremove("ylab"), nrow = 1, ncol = 3, common.legend = T, legend = 'bottom')
figure7 <- annotate_figure(figure7,
left = text_grob("Empirical bias",size = 10, rot =  90))
ggarrange(heights = c(4, 4, 4.9),figure5, figure6, figure7, nrow = 3, ncol = 1)
library(modelr)
library(tidyverse)
library(tidyr)
setwd("/Users/juliette/Documents/MPhil PHS 21-22/MPhil-dissertation/Code")
source("simulate_MSM_modified.R")
set.seed(20222022)
library(RandomisedTrialsEmulation)
library(MASS)
library(sandwich)
library(foreach)
library(doParallel)
library(parallel)
library(survival)
library(survminer)
library(lubridate)
library(ggplot2)
library(pammtools)
library(doRNG)
load("true_value_conf_modified.rda")
load("true_value_treat_modified.rda")
coefs <- array(, dim = c(5,1000,9))
treat <- array(, dim = c(5,1000,9))
size <- array(, dim = c(5,1000,6))
for (i in 1:9){
load(paste0("HPC output/coefs_PP_red_",i,".rda"))
load(paste0("HPC output/treat_PP_mod_",i,".rda"))
coefs[,,i] <- coefs_PP_red
treat[,,i] <- treat_PP_mod
}
sizes <- c(2,5,8,10,25,50)
for (i in 1:6){
load(paste0("HPC output/size_PP_mod_",sizes[i],".rda"))
size[,,i] <- size_PP_mod
}
bias_point_coefs <- array(,dim = c(5,9))
bias_point_treat <- array(,dim = c(5,9))
bias_point_size <- array(,dim = c(5,6))
for (i in 1:9){
bias_point_coefs[,i] <- rowMeans(coefs[,,i], na.rm = TRUE) - (true_value_conf_modified[,1,i] - true_value_conf_modified[,2,i])
bias_point_treat[,i] <- rowMeans(treat[,,i], na.rm = TRUE) - (true_value_treat_modified[,1,i] - true_value_treat_modified[,2,i])
coefs$sd <- apply(coefs[,,i], 1, sd)
treat$sd <- apply(treat[,,i], 1, sd)
}
for (i in 1:6){
bias_point_size[,i] <- rowMeans(size[,,i], na.rm = TRUE) - (true_value_conf_modified[,1,5] - true_value_conf_modified[,2,5])
size$sd <- apply(size[,,i], 1, sd)
}
coefs[,-1]
coefs[,-1,1]
library(modelr)
library(tidyverse)
library(tidyr)
setwd("/Users/juliette/Documents/MPhil PHS 21-22/MPhil-dissertation/Code")
source("simulate_MSM_modified.R")
set.seed(20222022)
library(RandomisedTrialsEmulation)
library(MASS)
library(sandwich)
library(foreach)
library(doParallel)
library(parallel)
library(survival)
library(survminer)
library(lubridate)
library(ggplot2)
library(pammtools)
library(doRNG)
load("true_value_conf_modified.rda")
load("true_value_treat_modified.rda")
coefs <- array(, dim = c(5,1000,9))
treat <- array(, dim = c(5,1000,9))
size <- array(, dim = c(5,1000,6))
for (i in 1:9){
load(paste0("HPC output/coefs_PP_red_",i,".rda"))
load(paste0("HPC output/treat_PP_mod_",i,".rda"))
coefs[,,i] <- coefs_PP_red
treat[,,i] <- treat_PP_mod
}
sizes <- c(2,5,8,10,25,50)
for (i in 1:6){
load(paste0("HPC output/size_PP_mod_",sizes[i],".rda"))
size[,,i] <- size_PP_mod
}
bias_point_coefs <- array(,dim = c(5,9))
bias_point_treat <- array(,dim = c(5,9))
bias_point_size <- array(,dim = c(5,6))
for (i in 1:9){
#bias_point_coefs[,i] <- rowMeans(coefs[,,i], na.rm = TRUE) - (true_value_conf_modified[,1,i] - true_value_conf_modified[,2,i])
#bias_point_treat[,i] <- rowMeans(treat[,,i], na.rm = TRUE) - (true_value_treat_modified[,1,i] - true_value_treat_modified[,2,i])
coefs$sd <- apply(coefs[,,i], 1, sd)
#treat$sd <- apply(treat[,,i], 1, sd)
}
